{"version":3,"file":"index.js","mappings":"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","sources":["webpack://react-audio-player-pro/webpack/bootstrap","webpack://react-audio-player-pro/webpack/runtime/define property getters","webpack://react-audio-player-pro/webpack/runtime/hasOwnProperty shorthand","webpack://react-audio-player-pro/webpack/runtime/make namespace object","webpack://react-audio-player-pro/external commonjs \"react/jsx-runtime\"","webpack://react-audio-player-pro/external commonjs \"react\"","webpack://react-audio-player-pro/./www/library/src/lib/css.ts","webpack://react-audio-player-pro/./www/library/src/audio-player/audio-player-const.ts","webpack://react-audio-player-pro/./www/library/src/layout/svg-image/c-svg-image.tsx","webpack://react-audio-player-pro/./www/library/src/layout/audio-player-control-sprite/audio-player-control-sprite.scss?ce3a","webpack://react-audio-player-pro/./www/library/src/layout/audio-player-control-sprite/c-audio-player-control-sprite.tsx","webpack://react-audio-player-pro/./www/library/src/layout/audio-player-control-button/audio-player-control-button.scss?1bcf","webpack://react-audio-player-pro/./www/library/src/layout/audio-player-control-button/audio-player-control-button-const.ts","webpack://react-audio-player-pro/./www/library/src/layout/audio-player-control-button/c-audio-player-control-button.tsx","webpack://react-audio-player-pro/./www/library/src/lib/time.ts","webpack://react-audio-player-pro/./www/library/src/layout/time/c-time.tsx","webpack://react-audio-player-pro/./www/library/src/layout/time/time.scss?6734","webpack://react-audio-player-pro/./www/library/src/layout/range-bar/c-range-bar.tsx","webpack://react-audio-player-pro/./www/library/src/layout/range-bar/range-bar.scss?df67","webpack://react-audio-player-pro/./www/library/src/layout/range-bar/range-bar-const.ts","webpack://react-audio-player-pro/./www/library/src/lib/media-meta-data/media-meta-data-const.ts","webpack://react-audio-player-pro/./www/library/src/lib/media-meta-data/media-meta-data.ts","webpack://react-audio-player-pro/./www/library/src/audio-player/audio-player-helper.ts","webpack://react-audio-player-pro/./www/library/src/provider/play-list/play-list-context-helper.ts","webpack://react-audio-player-pro/./www/library/src/provider/play-list/play-list-context.tsx","webpack://react-audio-player-pro/./www/library/src/lib/string.ts","webpack://react-audio-player-pro/./www/library/src/provider/play-list/play-list-context-const.ts","webpack://react-audio-player-pro/./www/library/src/play-list/add-track-to-play-list-button/c-add-track-to-play-list-button.tsx","webpack://react-audio-player-pro/./www/library/src/play-list/add-track-to-play-list-button/add-track-to-play-list-button.scss?8d46","webpack://react-audio-player-pro/./www/library/src/audio-player/audio/c-audio.tsx","webpack://react-audio-player-pro/./www/library/src/audio-player/audio/audio.scss?1d91","webpack://react-audio-player-pro/./www/library/src/lib/number.ts","webpack://react-audio-player-pro/./www/library/src/layout/spinner/spinner.scss?2352","webpack://react-audio-player-pro/./www/library/src/layout/spinner/spinner-const.ts","webpack://react-audio-player-pro/./www/library/src/layout/spinner/c-spinner.tsx","webpack://react-audio-player-pro/./www/library/src/audio-player/audio-player-head/audio-player-head-playing-bar/c-audio-player-head-playing-bar.tsx","webpack://react-audio-player-pro/./www/library/src/audio-player/audio-player-head/audio-player-head-playing-bar/audio-player-head-playing-bar.scss?5a82","webpack://react-audio-player-pro/./www/library/src/audio-player/audio-player-head/audio-player-head-controls/audio-player-head-controls.scss?1b94","webpack://react-audio-player-pro/./www/library/src/audio-player/audio-player-head/audio-player-head-controls/c-audio-player-head-controls.tsx","webpack://react-audio-player-pro/./www/library/src/audio-player/audio-player-head/c-audio-player-head.tsx","webpack://react-audio-player-pro/./www/library/src/audio-player/audio-player-head/audio-player-head.scss?3e8f","webpack://react-audio-player-pro/./www/library/src/audio-player/audio-player-track-list/audio-player-track-list.scss?30a1","webpack://react-audio-player-pro/./www/library/src/audio-player/audio-player-track-list/audio-player-track-list-item/audio-player-track-list-item.scss?8bb3","webpack://react-audio-player-pro/./www/library/src/audio-player/audio-player-track-list/audio-player-track-list-item/c-audio-player-track-list-item.tsx","webpack://react-audio-player-pro/./www/library/src/audio-player/audio-player-track-list/audio-player-track-list-item/audio-player-track-list-item-helper.ts","webpack://react-audio-player-pro/./www/library/src/audio-player/audio-player-track-list/c-audio-player-track-list.tsx","webpack://react-audio-player-pro/./www/library/src/audio-player/c-audio-player.tsx","webpack://react-audio-player-pro/./www/library/src/audio-player/audio-player.scss?7ffd","webpack://react-audio-player-pro/./www/library/src/provider/play-list/play-list-context-storage.ts","webpack://react-audio-player-pro/./www/library/src/provider/play-list/c-play-list-context.tsx","webpack://react-audio-player-pro/./www/library/src/play-list/play-list-panel/list-of-play-list/play-list-container/c-play-list-container.tsx","webpack://react-audio-player-pro/./www/library/src/play-list/play-list-panel/list-of-play-list/play-list-container/play-list-container.scss?e306","webpack://react-audio-player-pro/./www/library/src/play-list/play-list-panel/play-list-panel-helper.tsx","webpack://react-audio-player-pro/./www/library/src/play-list/play-list-panel/c-play-list-panel.tsx","webpack://react-audio-player-pro/./www/library/src/play-list/play-list-panel/play-list-panel.scss?451d"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"react/jsx-runtime\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"react\");","type ClassNamesArgumentValueType = string | null | void;\n\ntype ClassNamesArgumentType = ClassNamesArgumentValueType | {[key: string]: ClassNamesArgumentValueType | boolean};\n\n// eslint-disable-next-line complexity\nexport function classNames(...argumentList: Array<ClassNamesArgumentType>): string {\n    const classNameList: Array<string> = [];\n\n    // eslint-disable-next-line no-loops/no-loops\n    for (const classNameData of argumentList) {\n        if (!classNameData) {\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n\n        if (typeof classNameData === 'string') {\n            classNameList.push(classNameData);\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n\n        // eslint-disable-next-line no-loops/no-loops\n        for (const key in classNameData) {\n            if (classNameData[key]) {\n                classNameList.push(key);\n            }\n        }\n    }\n\n    return classNameList.join(' ');\n}\n","import {DefaultDefinedAudioPlayerStateType, PlayerPlayingStateType, PlayerRepeatingStateType} from '../../library';\n\n/*\nimport type {\n    AudioPlayerContextType,\n    AudioPlayerListItemType,\n    MediaMetadataType,\n    PlayerRepeatingStateType,\n} from './audio-player-type';\n*/\n\nexport const seekStepSecond = 10;\n\nexport const playerPlayingStateTypeMap: Record<PlayerPlayingStateType, PlayerPlayingStateType> = {\n    paused: 'paused',\n    playing: 'playing',\n    stopped: 'stopped',\n};\n\nexport const playerRepeatingStateTypeMap: Record<PlayerRepeatingStateType, PlayerRepeatingStateType> = {\n    all: 'all',\n    none: 'none',\n    one: 'one',\n};\n\nconst {none, all, one} = playerRepeatingStateTypeMap;\n\nexport const playerRepeatingStateTypeList: Array<PlayerRepeatingStateType> = [none, all, one];\n\nexport const defaultAudioPlayerState: DefaultDefinedAudioPlayerStateType = {\n    activeIndex: 0,\n    isMuted: false,\n    isShuffleOn: false,\n    isTrackListOpen: true,\n    repeatingState: none,\n};\n","type PropsType = Readonly<{\n    className: string;\n    imageId: string;\n}>;\n\nexport function SvgImage(props: PropsType): JSX.Element {\n    const {className, imageId} = props;\n\n    return (\n        <svg className={className}>\n            <use xlinkHref={imageId} />\n        </svg>\n    );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"hidden\":\"e05e18\"};","/* eslint-disable max-len */\n\nimport audioPlayerControlSpriteStyle from './audio-player-control-sprite.scss';\n\nexport const audioPlayerIconIdPrefix = 'audio-player-icon-id-prefix-';\nconst mainFillColor = '#5a5a5a';\nconst defaultViewBox = '0 0 24 24';\nconst xmlns = 'http://www.w3.org/2000/svg';\n\nexport function AudioPlayerControlSprite(): JSX.Element {\n    return (\n        <svg className={audioPlayerControlSpriteStyle.hidden}>\n            <symbol id={audioPlayerIconIdPrefix + 'button-pause-playlist'} viewBox={defaultViewBox} xmlns={xmlns}>\n                <path\n                    d=\"M14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.84-5 6.7v2.07c4-.91 7-4.49 7-8.77 0-4.28-3-7.86-7-8.77M16.5 12c0-1.77-1-3.29-2.5-4.03V16c1.5-.71 2.5-2.24 2.5-4M3 9v6h4l5 5V4L7 9H3z\"\n                    fill=\"#4285f4\"\n                />\n            </symbol>\n\n            <symbol id={audioPlayerIconIdPrefix + 'button-pause'} viewBox={defaultViewBox} xmlns={xmlns}>\n                <path d=\"M14 19h4V5h-4M6 19h4V5H6v14z\" fill={mainFillColor} />\n            </symbol>\n\n            <symbol id={audioPlayerIconIdPrefix + 'button-play'} viewBox={defaultViewBox} xmlns={xmlns}>\n                <path d=\"M8 5.14v14l11-7-11-7z\" fill={mainFillColor} />\n            </symbol>\n\n            <symbol id={audioPlayerIconIdPrefix + 'button-track-list'} viewBox=\"-1 -1 23 23\" xmlns={xmlns}>\n                <path d=\"M19 9H2v2h17V9m0-4H2v2h17V5M2 15h13v-2H2v2m15-2v6l5-3-5-3z\" fill={mainFillColor} />\n            </symbol>\n\n            <symbol id={audioPlayerIconIdPrefix + 'button-prev-track'} viewBox={defaultViewBox} xmlns={xmlns}>\n                <path d=\"M6 6h2v12H6zm3.5 6l8.5 6V6z\" fill={mainFillColor} />\n            </symbol>\n\n            <symbol id={audioPlayerIconIdPrefix + 'button-next-track'} viewBox={defaultViewBox} xmlns={xmlns}>\n                <path d=\"M6 18l8.5-6L6 6v12zM16 6v12h2V6h-2z\" fill={mainFillColor} />\n            </symbol>\n\n            <symbol id={audioPlayerIconIdPrefix + 'button-repeat'} viewBox={defaultViewBox} xmlns={xmlns}>\n                <path d=\"M17 17H7v-3l-4 4 4 4v-3h12v-6h-2M7 7h10v3l4-4-4-4v3H5v6h2V7z\" fill={mainFillColor} />\n            </symbol>\n\n            <symbol id={audioPlayerIconIdPrefix + 'button-repeat-one'} viewBox={defaultViewBox} xmlns={xmlns}>\n                <path\n                    d=\"M13 15V9h-1l-2 1v1h1.5v4m5.5 2H7v-3l-4 4 4 4v-3h12v-6h-2M7 7h10v3l4-4-4-4v3H5v6h2V7z\"\n                    fill={mainFillColor}\n                />\n            </symbol>\n\n            <symbol id={audioPlayerIconIdPrefix + 'button-shuffle'} viewBox={defaultViewBox} xmlns={xmlns}>\n                <path\n                    d=\"M14.83 13.41l-1.41 1.41 3.13 3.13L14.5 20H20v-5.5l-2.04 2.04-3.13-3.13M14.5 4l2.04 2.04L4 18.59 5.41 20 17.96 7.46 20 9.5V4m-9.41 5.17L5.41 4 4 5.41l5.17 5.17 1.42-1.41z\"\n                    fill={mainFillColor}\n                />\n            </symbol>\n\n            <symbol id={audioPlayerIconIdPrefix + 'button-sound-off'} viewBox={defaultViewBox} xmlns={xmlns}>\n                <path\n                    d=\"M12 4L9.91 6.09 12 8.18M4.27 3L3 4.27 7.73 9H3v6h4l5 5v-6.73l4.25 4.26c-.67.51-1.42.93-2.25 1.17v2.07c1.38-.32 2.63-.95 3.68-1.81L19.73 21 21 19.73l-9-9M19 12c0 .94-.2 1.82-.54 2.64l1.51 1.51A8.916 8.916 0 0 0 21 12c0-4.28-3-7.86-7-8.77v2.06c2.89.86 5 3.54 5 6.71m-2.5 0c0-1.77-1-3.29-2.5-4.03v2.21l2.45 2.45c.05-.2.05-.42.05-.63z\"\n                    fill={mainFillColor}\n                />\n            </symbol>\n\n            <symbol id={audioPlayerIconIdPrefix + 'button-sound-on'} viewBox={defaultViewBox} xmlns={xmlns}>\n                <path\n                    d=\"M14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.84-5 6.7v2.07c4-.91 7-4.49 7-8.77 0-4.28-3-7.86-7-8.77M16.5 12c0-1.77-1-3.29-2.5-4.03V16c1.5-.71 2.5-2.24 2.5-4M3 9v6h4l5 5V4L7 9H3z\"\n                    fill={mainFillColor}\n                />\n            </symbol>\n\n            <symbol id={audioPlayerIconIdPrefix + 'button-download'} viewBox={defaultViewBox} xmlns={xmlns}>\n                <path d=\"M5,20H19V18H5M19,9H15V3H9V9H5L12,16L19,9Z\" fill={mainFillColor} />\n            </symbol>\n\n            <symbol id={audioPlayerIconIdPrefix + 'play-list-menu'} viewBox={defaultViewBox} xmlns={xmlns}>\n                <path\n                    d=\"M15 6H3v2h12V6zm0 4H3v2h12v-2zM3 16h8v-2H3v2zM17 6v8.18c-.31-.11-.65-.18-1-.18-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3V8h3V6h-5z\"\n                    fill={mainFillColor}\n                />\n            </symbol>\n\n            <symbol id={audioPlayerIconIdPrefix + 'play-list-plus'} viewBox=\"-1 -1 23 23\" xmlns={xmlns}>\n                <path\n                    d=\"M14 10H2v2h12v-2zm0-4H2v2h12V6zm4 8v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zM2 16h8v-2H2v2z\"\n                    fill={mainFillColor}\n                />\n            </symbol>\n\n            <symbol id={audioPlayerIconIdPrefix + 'trash-bin'} viewBox={defaultViewBox} xmlns={xmlns}>\n                <path\n                    d=\"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zm2.46-7.12l1.41-1.41L12 12.59l2.12-2.12 1.41 1.41L13.41 14l2.12 2.12-1.41 1.41L12 15.41l-2.12 2.12-1.41-1.41L10.59 14l-2.13-2.12zM15.5 4l-1-1h-5l-1 1H5v2h14V4z\"\n                    fill={mainFillColor}\n                />\n            </symbol>\n        </svg>\n    );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"audio_player_control__button__image\":\"ac7b4a\",\"audio_player_control__button\":\"bff2b5\",\"audio_player_control__button__active\":\"a45085\",\"audio_player_control__button__disabled\":\"ba5145\",\"audio_player_control__button__bordered\":\"fde0b7\",\"audio_player_control__hide_for_narrow\":\"ab5ee0\"};","import {AudioPlayerControlTagNameType} from './audio-player-control-button-type';\n\nexport const audioPlayerControlTagNameMap: Record<AudioPlayerControlTagNameType, AudioPlayerControlTagNameType> = {\n    div: 'div',\n    span: 'span',\n};\n","import {classNames} from '../../lib/css';\nimport {SvgImage} from '../svg-image/c-svg-image';\nimport {audioPlayerIconIdPrefix} from '../audio-player-control-sprite/c-audio-player-control-sprite';\n\nimport audioPlayerControlStyle from './audio-player-control-button.scss';\nimport {AudioPlayerControlTagNameType} from './audio-player-control-button-type';\nimport {audioPlayerControlTagNameMap} from './audio-player-control-button-const';\n\nconst cssButton = audioPlayerControlStyle.audio_player_control__button;\nconst cssActive = audioPlayerControlStyle.audio_player_control__button__active;\nconst cssWidthBorder = audioPlayerControlStyle.audio_player_control__button__bordered;\nconst cssImage = audioPlayerControlStyle.audio_player_control__button__image;\nconst hideForNarrow = audioPlayerControlStyle.audio_player_control__hide_for_narrow;\n\ntype PropsType = Readonly<{\n    ariaLabel: string;\n    className?: string;\n    hasBorder?: boolean;\n    imageId: string;\n    isActive?: boolean;\n    isHideForNarrow?: boolean;\n    onClick?: () => unknown;\n    tag?: AudioPlayerControlTagNameType;\n}>;\n\nexport function AudioPlayerControlButton(props: PropsType): JSX.Element {\n    const {onClick, imageId, isActive, ariaLabel, className, tag, hasBorder, isHideForNarrow} = props;\n    const fullClassName = classNames(\n        cssButton,\n        {\n            [cssActive]: isActive,\n            [cssWidthBorder]: hasBorder,\n            [hideForNarrow]: isHideForNarrow,\n        },\n        className\n    );\n\n    const image = <SvgImage className={cssImage} imageId={'#' + audioPlayerIconIdPrefix + imageId} />;\n\n    if (tag === audioPlayerControlTagNameMap.div) {\n        return <div className={fullClassName}>{image}</div>;\n    }\n\n    if (tag === audioPlayerControlTagNameMap.span) {\n        return <span className={fullClassName}>{image}</span>;\n    }\n\n    return (\n        <button aria-label={ariaLabel} className={fullClassName} onClick={onClick} type=\"button\">\n            <SvgImage className={cssImage} imageId={'#' + audioPlayerIconIdPrefix + imageId} />\n        </button>\n    );\n}\n","type TrackHumanTimeType = Readonly<{\n    minutes: string;\n    seconds: string;\n}>;\n\nexport function getTrackHumanTime(timeInSeconds: number): TrackHumanTimeType {\n    return {\n        minutes: String(Math.floor(timeInSeconds / 60)),\n        seconds: String(Math.floor(timeInSeconds % 60)).padStart(2, '0'),\n    };\n}\n\nexport function getProgressHumanTime(currentTimeInSeconds: number, fullTimeInSeconds: number): string {\n    const {minutes: currentTimeMinutes, seconds: currentTimeSeconds} = getTrackHumanTime(currentTimeInSeconds);\n    const {minutes: fullTimeMinutes, seconds: fullTimeSeconds} = getTrackHumanTime(fullTimeInSeconds);\n\n    const currentTimeResult = `${currentTimeMinutes}:${currentTimeSeconds}`;\n    const fullTimeResult = `${fullTimeMinutes}:${fullTimeSeconds}`;\n\n    return `${currentTimeResult} / ${fullTimeResult}`;\n}\n","import {getProgressHumanTime} from '../../lib/time';\nimport {classNames} from '../../lib/css';\n\nimport timeStyle from './time.scss';\n\ntype PropsType = Readonly<{\n    className?: string;\n    currentTime: number;\n    fullTime: number;\n}>;\n\nexport function Time(props: PropsType): JSX.Element {\n    const {currentTime, fullTime, className} = props;\n\n    const fullClassName = classNames(timeStyle.time, className);\n    const timeProgress = getProgressHumanTime(currentTime, fullTime);\n\n    return <span className={fullClassName}>{timeProgress}</span>;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"time\":\"c7b08a\"};","/* global HTMLInputElement */\n\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n\nimport {useRef, useState} from 'react';\n\nimport {classNames} from '../../lib/css';\n\nimport rangeBarStyle from './range-bar.scss';\nimport {inputData} from './range-bar-const';\n\ntype PropsType = Readonly<{\n    ariaLabel: string;\n    className?: string;\n    isDisable?: boolean;\n    isHideForNarrow?: boolean;\n    onChange: (value: number) => void;\n    progress: number;\n}>;\n\nexport function RangeBar(props: PropsType): JSX.Element {\n    const [isMouseDown, setIsMouseDown] = useState<boolean>(false);\n    const inputRef = useRef<HTMLInputElement | null>(null);\n    const {className, isDisable, progress, onChange, ariaLabel, isHideForNarrow} = props;\n\n    function getCurrentValue(): number {\n        const {current} = inputRef;\n\n        if (!current) {\n            return 0;\n        }\n\n        return Number.parseFloat(current.value);\n    }\n\n    function handleMouseDown() {\n        setIsMouseDown(true);\n    }\n\n    function handleMouseUp() {\n        setIsMouseDown(false);\n    }\n\n    function handleProgressBarChange() {\n        onChange(getCurrentValue());\n    }\n\n    const fullClassName = classNames(rangeBarStyle.range_bar, className, {\n        [rangeBarStyle.wrapper__active]: isMouseDown,\n        [rangeBarStyle.wrapper__disable]: isDisable === true,\n        [rangeBarStyle.range_bar__hide_for_narrow]: isHideForNarrow,\n    });\n\n    return (\n        <div className={fullClassName} onPointerDown={handleMouseDown} onPointerUp={handleMouseUp}>\n            <div className={rangeBarStyle.progress_bar__wrapper}>\n                <div\n                    className={rangeBarStyle.progress_bar}\n                    style={{transform: `translateZ(0) scaleX(${progress || 0})`}}\n                />\n            </div>\n\n            <div className={rangeBarStyle.point_bar__wrapper}>\n                <div className={rangeBarStyle.point_bar} style={{left: `${progress * 100}%`}} />\n            </div>\n\n            <input\n                aria-label={ariaLabel}\n                className={rangeBarStyle.input_range}\n                defaultValue={inputData.defaultValue}\n                max={inputData.max}\n                min={inputData.min}\n                onChange={handleProgressBarChange}\n                ref={inputRef}\n                step={inputData.step}\n                type=\"range\"\n            />\n        </div>\n    );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"range_bar\":\"e0b58b\",\"wrapper__active\":\"d6d969\",\"wrapper__disable\":\"c0ae57\",\"progress_bar__wrapper\":\"cc7be8\",\"progress_bar\":\"c44fc5\",\"point_bar__wrapper\":\"eee1d0\",\"point_bar\":\"f79532\",\"input_range\":\"f9d0be\",\"range_bar__hide_for_narrow\":\"e13c85\"};","export const inputData = {\n    defaultValue: 0,\n    max: 1,\n    min: 0,\n    step: 0.001,\n};\n","/* global MediaSessionAction */\n\nexport const mediaMetadataControlNameList: Array<MediaSessionAction> = [\n    'nexttrack',\n    'pause',\n    'play',\n    'previoustrack',\n    'seekbackward',\n    'seekforward',\n];\n","/* global navigator, MediaMetadata, MediaMetadataInit */\n\nimport {MediaMetadataControlSettingType} from './media-meta-data-type';\nimport {mediaMetadataControlNameList} from './media-meta-data-const';\n\nexport function clearMediaMetadata(): void {\n    if (typeof navigator === 'undefined' || typeof MediaMetadata === 'undefined') {\n        return;\n    }\n\n    if (!('mediaSession' in navigator)) {\n        return;\n    }\n\n    navigator.mediaSession.metadata = null;\n\n    // eslint-disable-next-line no-loops/no-loops\n    for (const controlName of mediaMetadataControlNameList) {\n        navigator.mediaSession.setActionHandler(controlName, null);\n    }\n}\n\n// eslint-disable-next-line complexity\nexport function setMediaMetadata(\n    mediaMetadata: MediaMetadataInit,\n    mediaMetadataControlSetting?: MediaMetadataControlSettingType\n): void {\n    if (typeof navigator === 'undefined' || typeof MediaMetadata === 'undefined') {\n        return;\n    }\n\n    if (!('mediaSession' in navigator)) {\n        return;\n    }\n\n    clearMediaMetadata();\n\n    navigator.mediaSession.metadata = new MediaMetadata(mediaMetadata);\n\n    if (!mediaMetadataControlSetting) {\n        return;\n    }\n\n    // eslint-disable-next-line no-loops/no-loops\n    for (const controlName of mediaMetadataControlNameList) {\n        navigator.mediaSession.setActionHandler(controlName, mediaMetadataControlSetting[controlName] || null);\n    }\n}\n","/* global HTMLAudioElement*/\n\nimport {DefaultAudioPlayerStateType, DefaultDefinedAudioPlayerStateType} from '../../library';\n\nimport {defaultAudioPlayerState} from './audio-player-const';\n\nexport function getDefaultState(defaultState?: DefaultAudioPlayerStateType): DefaultDefinedAudioPlayerStateType {\n    if (defaultState) {\n        return {\n            ...defaultAudioPlayerState,\n            ...defaultState,\n        };\n    }\n\n    return defaultAudioPlayerState;\n}\n\nexport function getStopHandler(audioTag: HTMLAudioElement): () => void {\n    return function handleOnStop() {\n        // eslint-disable-next-line no-param-reassign\n        audioTag.currentTime = 0;\n\n        function handleCanPlay() {\n            audioTag.removeEventListener('canplay', handleCanPlay, false);\n\n            // eslint-disable-next-line promise/catch-or-return\n            audioTag\n                .play()\n                // eslint-disable-next-line promise/always-return\n                .then(() => {\n                    audioTag.pause();\n                    // eslint-disable-next-line no-param-reassign\n                    audioTag.currentTime = 0;\n                });\n        }\n\n        audioTag.addEventListener('canplay', handleCanPlay, false);\n    };\n}\n","import {SavedTrackType, TrackType} from '../../../library';\n// import {extractText} from '../../lib/string';\n\nimport {PlayListContextType, PlayListType} from './play-list-context-type';\n\nexport function getDefaultPlayListContextData(): PlayListContextType {\n    const defaultPlayList: PlayListType = {\n        name: '',\n        trackList: [],\n        // isDefault: false,\n    };\n\n    return {\n        createPlayList: (): PlayListType => defaultPlayList,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars\n        deletePlayList: (playList: PlayListType): Error | null => new Error('deletePlayList: overwrite me'),\n        getAllPlayLists: (): Array<PlayListType> => [defaultPlayList],\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars\n        getTrackById: (trackId: string): SavedTrackType | null => null,\n        isInitialized: false,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars\n        removeTrackById: (trackId: string): Error | null => new Error('removeTrack: overwrite me'),\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars\n        updatePlayList: (oldPlayList: PlayListType, newListPlayData: PlayListType): Error | PlayListType => {\n            return new Error('updatePlayList: overwrite me');\n        },\n    };\n}\n\n/*\nexport function getTrackContentAsString(track: TrackType): string {\n    const {content, mediaMetadata} = track;\n\n    if (typeof content === 'string') {\n        return content;\n    }\n\n    if (mediaMetadata) {\n        return mediaMetadata.title;\n    }\n\n    return track.src;\n}\n*/\n\n/*\nexport function getTrackList(list: Array<PlayListType>): Array<SavedTrackType> {\n    const resultList: Array<SavedTrackType> = [];\n\n    list.forEach((playList: PlayListType) => {\n        resultList.push(...playList.trackList);\n    });\n\n    return resultList;\n}\n*/\n\n/*\nexport function getTrackListIdList(trackList: Array<SavedTrackType>): Array<string> {\n    return trackList.map<string>((track: SavedTrackType): string => track.id);\n}\n*/\n\nexport function isTracksEquals(trackA: SavedTrackType | TrackType, trackB: SavedTrackType | TrackType): boolean {\n    return trackA.src === trackB.src;\n}\n\nexport function savedTrackToTrack(savedTrack: SavedTrackType): TrackType {\n    const {src, mediaMetadata, content} = savedTrack;\n\n    let track: TrackType = {src};\n\n    if (mediaMetadata) {\n        track = {...track, mediaMetadata};\n    }\n\n    if (content) {\n        track = {...track, content};\n    }\n\n    return track;\n}\n\n/*\nexport function savedTrackListToTrackList(list: Array<SavedTrackType>): Array<TrackType> {\n    return list.map(savedTrackToTrack);\n}\n*/\n","import {Context, createContext} from 'react';\n\nimport {PlayListContextType} from './play-list-context-type';\nimport {getDefaultPlayListContextData} from './play-list-context-helper';\n\nconst defaultPlayListContextData = getDefaultPlayListContextData();\n\nexport const PlayListContext: Context<PlayListContextType> =\n    createContext<PlayListContextType>(defaultPlayListContextData);\n","// const openTagRegExp = /<\\w[\\S\\s]*?>/g;\n// const closeTagRegExp = /<\\/\\w*?>/g;\n// const selfCloseTagRegExp = /<\\w[\\S\\s]*?\\/>/g;\n\n/*\nexport function extractText(html: string): string {\n    return (\n        html\n            // remove open tags\n            .replace(openTagRegExp, '')\n            // remove close tags\n            .replace(closeTagRegExp, '')\n            // remove self close tags\n            .replace(selfCloseTagRegExp, '')\n            .trim()\n    );\n}\n*/\n\n// for 1e6 return string witch length 5 symbols, min - '0',  max - 'f4240'\nexport function getRandomString(): string {\n    return Math.round(1e6 * Math.random()).toString(16);\n}\n\nfunction getRandomOne(): -1 | 1 {\n    return Math.random() > 0.5 ? 1 : -1;\n}\n\nexport function getRandomStringBySize(size: number): string {\n    return Array.from({length: size}).map(getRandomString).sort(getRandomOne).join('').slice(0, size);\n}\n","export const defaultPlayListName = 'Play list';\nexport const noNamePlayListName = 'No name playlist';\n","/* global HTMLSelectElement */\n\n/* eslint-disable jsx-a11y/no-onchange */\n\nimport {useCallback, useContext, useState, SyntheticEvent} from 'react';\n\nimport {classNames} from '../../lib/css';\nimport {PlayListContext} from '../../provider/play-list/play-list-context';\nimport {SavedTrackType, TrackType} from '../../../library';\nimport {isTracksEquals} from '../../provider/play-list/play-list-context-helper';\nimport {getRandomString} from '../../lib/string';\nimport {PlayListType} from '../../provider/play-list/play-list-context-type';\nimport {noNamePlayListName} from '../../provider/play-list/play-list-context-const';\nimport {AudioPlayerControlButton} from '../../layout/audio-player-control-button/c-audio-player-control-button';\n\nimport addTrackToPlayListButtonStyle from './add-track-to-play-list-button.scss';\n\ntype PropsType = Readonly<{\n    className?: string;\n    track: TrackType;\n}>;\n\nexport function PlayListMenuButton(props: PropsType): JSX.Element | null {\n    const {className, track} = props;\n    const fullClassName = classNames(addTrackToPlayListButtonStyle.add_track_to_play_list_button, className);\n    const playListContextData = useContext(PlayListContext);\n    const [selectKey, setSelectKey] = useState<number>(0);\n    const {\n        getAllPlayLists,\n        updatePlayList,\n        removeTrackById,\n        isInitialized: isPlayListContextInitialized,\n    } = playListContextData;\n    const listOfPlayList = getAllPlayLists();\n    const defaultSelectValue = '-1';\n\n    const handleAddTrack = useCallback(\n        // eslint-disable-next-line max-statements, complexity\n        function handleAddTrackInner(evt: SyntheticEvent<HTMLSelectElement>) {\n            const selectNode = evt.currentTarget;\n            const listIndex = Number.parseInt(selectNode.value, 10);\n            const playList = listOfPlayList[listIndex];\n            const {src, mediaMetadata, content, preload, duration} = track;\n            // const content = getTrackContentAsString(track);\n\n            setSelectKey(selectKey + 1);\n\n            if (!playList) {\n                console.log('Can not get play list by index', listIndex);\n                return;\n            }\n\n            const existsSavedTrack = playList.trackList.find((savedTrack: SavedTrackType): boolean => {\n                return isTracksEquals(savedTrack, track);\n            });\n\n            if (existsSavedTrack) {\n                removeTrackById(existsSavedTrack.id);\n                return;\n            }\n\n            let trackToSave: SavedTrackType = {\n                id: getRandomString(),\n                src,\n            };\n\n            if (mediaMetadata) {\n                trackToSave = {\n                    ...trackToSave,\n                    mediaMetadata,\n                };\n            }\n\n            if (typeof content === 'string') {\n                trackToSave = {\n                    ...trackToSave,\n                    content,\n                };\n            }\n\n            if (typeof preload === 'string') {\n                trackToSave = {\n                    ...trackToSave,\n                    preload,\n                };\n            }\n\n            if (typeof duration === 'number') {\n                trackToSave = {\n                    ...trackToSave,\n                    duration,\n                };\n            }\n\n            const newTrackList: Array<SavedTrackType> = [trackToSave, ...playList.trackList];\n\n            updatePlayList(playList, {\n                ...playList,\n                trackList: newTrackList,\n            });\n\n            selectNode.value = defaultSelectValue;\n\n            console.log('---> track added to list!');\n            console.log(trackToSave);\n            console.log(playList);\n        },\n        [listOfPlayList, updatePlayList, track, defaultSelectValue, removeTrackById, setSelectKey, selectKey]\n    );\n\n    if (!isPlayListContextInitialized) {\n        return null;\n    }\n\n    return (\n        <label className={addTrackToPlayListButtonStyle.content_wrapper}>\n            <AudioPlayerControlButton ariaLabel=\"play list menu\" className={fullClassName} imageId=\"play-list-menu\" />\n\n            <select\n                className={addTrackToPlayListButtonStyle.select_play_list}\n                defaultValue={defaultSelectValue}\n                key={selectKey}\n                onChange={handleAddTrack}\n            >\n                <option disabled value={defaultSelectValue}>\n                    &nbsp;\n                </option>\n\n                {listOfPlayList.map((playList: PlayListType, index: number): JSX.Element => {\n                    const isTrackExistsInPlayList = playList.trackList.find((savedTrack: SavedTrackType): boolean =>\n                        isTracksEquals(savedTrack, track)\n                    );\n\n                    const name = playList.name.trim() || noNamePlayListName;\n                    const actionSign = isTrackExistsInPlayList ? '[✓]' : '[_]';\n                    const text = actionSign + ' ' + name;\n\n                    return (\n                        <option key={String(index) + name} value={index}>\n                            {text}\n                        </option>\n                    );\n                })}\n            </select>\n        </label>\n    );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"content_wrapper\":\"b8f0f4\",\"add_track_to_play_list_button\":\"cf10f9\",\"select_play_list\":\"f2a1b7\"};","/* global HTMLAudioElement, MediaMetadataInit */\n\nimport {useEffect, useRef, useState} from 'react';\n\nimport {classNames} from '../../lib/css';\nimport {playerPlayingStateTypeMap, seekStepSecond} from '../audio-player-const';\nimport {AudioPlayerControlButton} from '../../layout/audio-player-control-button/c-audio-player-control-button';\nimport {Time} from '../../layout/time/c-time';\nimport {AudioPreloadValueType, PlayerPlayingStateType, TrackType} from '../../../library';\nimport {RangeBar} from '../../layout/range-bar/c-range-bar';\nimport {setMediaMetadata} from '../../lib/media-meta-data/media-meta-data';\nimport {getStopHandler} from '../audio-player-helper';\nimport {PlayListMenuButton} from '../../play-list/add-track-to-play-list-button/c-add-track-to-play-list-button';\nimport {audioPlayerControlTagNameMap} from '../../layout/audio-player-control-button/audio-player-control-button-const';\n\nimport audioStyle from './audio.scss';\n\nexport type AudioPropsType = {\n    className?: string;\n    downloadFileName?: string;\n    duration?: number;\n    mediaMetadata?: MediaMetadataInit;\n    onDidMount?: (audioNode: HTMLAudioElement | null) => void;\n    preload?: AudioPreloadValueType;\n    src: string;\n    useRepeatButton?: boolean;\n};\n\n// eslint-disable-next-line complexity, max-statements, sonarjs/cognitive-complexity\nexport function Audio(props: AudioPropsType): JSX.Element {\n    const {\n        className,\n        downloadFileName,\n        duration = 0,\n        mediaMetadata,\n        onDidMount,\n        preload = 'auto',\n        src,\n        useRepeatButton = false,\n    } = props;\n\n    const refAudio = useRef<HTMLAudioElement | null>(null);\n    const [trackCurrentTime, setTrackCurrentTime] = useState<number>(0);\n    const [trackFullTime, setTrackFullTime] = useState<number>(duration);\n    const [trackVolume, setTrackVolume] = useState<number>(1);\n    const [isMuted, setIsMuted] = useState<boolean>(false);\n    const [playingState, setPlayingState] = useState<PlayerPlayingStateType>(playerPlayingStateTypeMap.paused);\n    const [isRepeatOn, setIsRepeatOn] = useState<boolean>(false);\n    const isActualMuted = isMuted || trackVolume === 0;\n    const soundImageId = isActualMuted ? 'button-sound-off' : 'button-sound-on';\n\n    function getAudioTag(): HTMLAudioElement {\n        const audioTag = refAudio.current;\n\n        if (audioTag) {\n            return audioTag;\n        }\n\n        throw new Error('Audio tag is not exists');\n    }\n\n    function handleClickPlay() {\n        const audioTag = getAudioTag();\n\n        audioTag.play();\n    }\n\n    function handleOnEnded() {\n        const audioTag = getAudioTag();\n\n        audioTag.currentTime = 0;\n\n        if (isRepeatOn) {\n            setTrackCurrentTime(0);\n            handleClickPlay();\n            return;\n        }\n\n        setPlayingState(playerPlayingStateTypeMap.paused);\n        setTrackCurrentTime(0);\n    }\n\n    function handleOnLoadedMetadata() {\n        const audioTag = getAudioTag();\n\n        setTrackCurrentTime(0);\n        setTrackFullTime(audioTag.duration);\n\n        audioTag.volume = trackVolume;\n    }\n\n    function handleOnPause() {\n        setPlayingState(playerPlayingStateTypeMap.paused);\n    }\n\n    function seekForward() {\n        const audioTag = getAudioTag();\n\n        audioTag.currentTime += seekStepSecond;\n    }\n\n    function seekBackward() {\n        const audioTag = getAudioTag();\n\n        audioTag.currentTime -= seekStepSecond;\n    }\n\n    function handleOnPlay() {\n        setPlayingState(playerPlayingStateTypeMap.playing);\n\n        const seek = {\n            seekbackward: seekBackward,\n            seekforward: seekForward,\n            stop: getStopHandler(getAudioTag()),\n        };\n\n        if (mediaMetadata) {\n            setMediaMetadata(mediaMetadata, seek);\n            return;\n        }\n\n        setMediaMetadata({title: src}, seek);\n    }\n\n    function handleOnTimeUpdate() {\n        const audioTag = getAudioTag();\n\n        setTrackCurrentTime(audioTag.currentTime);\n    }\n\n    function handleOnVolumeChange() {\n        const audioTag = getAudioTag();\n\n        setIsMuted(audioTag.muted);\n        setTrackVolume(audioTag.volume);\n    }\n\n    function handleClickPause() {\n        const audioTag = getAudioTag();\n\n        audioTag.pause();\n    }\n\n    function handleClickRepeat() {\n        setIsRepeatOn(!isRepeatOn);\n    }\n\n    function handleOnChangeProgressBar(progress: number) {\n        const audioTag = getAudioTag();\n        const audioTagTrackCurrentTime = progress * trackFullTime;\n\n        audioTag.currentTime = audioTagTrackCurrentTime;\n\n        setTrackCurrentTime(audioTagTrackCurrentTime);\n    }\n\n    function handleClickToggleMute() {\n        const audioTag = getAudioTag();\n        const audioTagIsMuted = !audioTag.muted;\n\n        audioTag.muted = audioTagIsMuted;\n        setIsMuted(audioTagIsMuted);\n    }\n\n    function handleChangeVolumeBar(volumeBarValue: number) {\n        const audioTag = getAudioTag();\n\n        audioTag.volume = volumeBarValue;\n\n        setTrackVolume(volumeBarValue);\n    }\n\n    useEffect(() => {\n        const audioTag = getAudioTag();\n\n        if (onDidMount) {\n            onDidMount(audioTag);\n        }\n    }, [onDidMount]);\n\n    const track: TrackType = mediaMetadata ? {mediaMetadata, src} : {src};\n\n    return (\n        <div className={classNames(audioStyle.audio, className)}>\n            <audio\n                className={audioStyle.audio_tag}\n                onEnded={handleOnEnded}\n                onLoadedMetadata={handleOnLoadedMetadata}\n                onPause={handleOnPause}\n                onPlay={handleOnPlay}\n                onTimeUpdate={handleOnTimeUpdate}\n                onVolumeChange={handleOnVolumeChange}\n                preload={preload}\n                ref={refAudio}\n                src={src}\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                volume={trackVolume} // eslint-disable-line react/no-unknown-property\n            >\n                <track kind=\"captions\" src={src} />\n            </audio>\n\n            {playingState === playerPlayingStateTypeMap.playing ? (\n                <AudioPlayerControlButton ariaLabel=\"pause\" imageId=\"button-pause\" onClick={handleClickPause} />\n            ) : (\n                <AudioPlayerControlButton ariaLabel=\"play\" imageId=\"button-play\" onClick={handleClickPlay} />\n            )}\n\n            {useRepeatButton ? (\n                <AudioPlayerControlButton\n                    ariaLabel=\"repeat\"\n                    imageId=\"button-repeat\"\n                    isActive={isRepeatOn}\n                    onClick={handleClickRepeat}\n                />\n            ) : null}\n\n            <Time className={audioStyle.time} currentTime={trackCurrentTime} fullTime={trackFullTime} />\n\n            <RangeBar\n                ariaLabel=\"progress bar\"\n                onChange={handleOnChangeProgressBar}\n                progress={trackCurrentTime / trackFullTime}\n            />\n\n            <AudioPlayerControlButton\n                ariaLabel=\"switch-sound\"\n                imageId={soundImageId}\n                isHideForNarrow\n                onClick={handleClickToggleMute}\n            />\n\n            <RangeBar\n                ariaLabel=\"volume bar\"\n                className={audioStyle.sound_range}\n                isHideForNarrow\n                onChange={handleChangeVolumeBar}\n                progress={trackVolume}\n            />\n\n            <a\n                aria-label=\"download\"\n                className={audioStyle.download_button}\n                download={downloadFileName || true}\n                href={src}\n            >\n                <AudioPlayerControlButton\n                    ariaLabel=\"download\"\n                    imageId=\"button-download\"\n                    tag={audioPlayerControlTagNameMap.span}\n                />\n            </a>\n\n            <PlayListMenuButton track={track} />\n        </div>\n    );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"audio_tag\":\"e22549\",\"audio\":\"ce6c17\",\"time\":\"e154e9\",\"sound_range\":\"cae029\",\"download_button\":\"a3d9e7\"};","export function getShiftIndex(listLength: number, currentIndex: number, shift: number): number {\n    const rawIndex = (currentIndex + shift) % listLength;\n\n    if (rawIndex < 0) {\n        return rawIndex + listLength;\n    }\n\n    return rawIndex;\n}\n\nexport function getRandom(fromInclude: number, toExclude: number, excludeList?: Array<number>): number {\n    if (toExclude - fromInclude < 1) {\n        return fromInclude;\n    }\n\n    const randomNumber = fromInclude + Math.floor(Math.random() * (toExclude - fromInclude));\n\n    if (!excludeList) {\n        return randomNumber;\n    }\n\n    if (excludeList.includes(randomNumber)) {\n        return getRandom(fromInclude, toExclude, excludeList);\n    }\n\n    return randomNumber;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"spinner_image\":\"d9b0ab\",\"loading-spinner\":\"f9ab9b\",\"spinner_wrapper\":\"c82f2f\",\"show-spinner-animation\":\"c39598\",\"spinner_wrapper__static\":\"da10e0\"};","import {PositionType} from './spinner-type';\n\nexport const defaultData = {\n    size: 48,\n};\n\nexport const positionValueMap: Record<PositionType, PositionType> = {\n    absolute: 'absolute',\n    fixed: 'fixed',\n    relative: 'relative',\n    'static': 'static',\n};\n","import {classNames} from '../../lib/css';\n\nimport spinnerStyle from './spinner.scss';\nimport {defaultData, positionValueMap} from './spinner-const';\nimport {PositionType} from './spinner-type';\n\nconst {size: defaultSize} = defaultData;\n\ntype PropsType = Readonly<{\n    // default - 5px\n    arcColor?: string;\n    // default - $color-border\n    circleColor?: string;\n    // default - 100%\n    className?: string;\n    // default - $light-gray\n    isShow?: boolean;\n    // default - 48px\n    lineWidth?: number; // default - true\n    position?: PositionType;\n    size?: number;\n    // default - static\n    wrapperColor?: string;\n    // default - 100%\n    wrapperHeight?: number | string;\n    // default - transparent\n    wrapperPadding?: number | string;\n    // default - 12px\n    wrapperWidth?: number | string; // default = ''\n}>;\n\nexport function Spinner(props: PropsType): JSX.Element | null {\n    const {\n        size: rawSize,\n        lineWidth,\n        arcColor,\n        circleColor,\n        isShow,\n        wrapperWidth,\n        wrapperHeight,\n        position: rawPosition,\n        wrapperColor,\n        wrapperPadding,\n        className,\n    } = props;\n\n    if (isShow === false) {\n        return null;\n    }\n\n    const position = rawPosition || positionValueMap.static;\n    const size = rawSize || defaultSize;\n\n    const spinnerImageStyle = {\n        borderColor: circleColor,\n        borderTopColor: arcColor,\n        borderWidth: lineWidth,\n        height: size,\n        width: size,\n    };\n\n    const spinnerWrapperStyle = {\n        backgroundColor: wrapperColor,\n        height: wrapperHeight,\n        minHeight: size,\n        minWidth: size,\n        padding: wrapperPadding,\n        position,\n        width: wrapperWidth,\n    };\n\n    return (\n        <div\n            className={classNames(spinnerStyle.spinner_wrapper, className, {\n                [spinnerStyle.spinner_wrapper__static]: position === positionValueMap.static,\n            })}\n            style={spinnerWrapperStyle}\n        >\n            <div className={spinnerStyle.spinner_image} style={spinnerImageStyle} />\n        </div>\n    );\n}\n","import {Time} from '../../../layout/time/c-time';\nimport {RangeBar} from '../../../layout/range-bar/c-range-bar';\nimport {AudioPlayerControlButton} from '../../../layout/audio-player-control-button/c-audio-player-control-button';\n\nimport audioPlayerHeadPlayingBarStyle from './audio-player-head-playing-bar.scss';\n\ntype PropsType = Readonly<{\n    isMuted: boolean;\n    onChangeProgressBar: (progress: number) => void;\n    onChangeVolumeBar: (volume: number) => void;\n    onClickMuteVolume: () => void;\n    trackCurrentTime: number;\n    trackFullTime: number;\n    trackVolume: number;\n}>;\n\nexport function AudioPlayerHeadPlayingBar(props: PropsType): JSX.Element {\n    const {\n        trackCurrentTime,\n        trackFullTime,\n        onClickMuteVolume,\n        isMuted,\n        trackVolume,\n        onChangeProgressBar,\n        onChangeVolumeBar,\n    } = props;\n    const isActualMuted = isMuted || trackVolume === 0;\n    const soundImageSrc = isActualMuted ? 'button-sound-off' : 'button-sound-on';\n    const isTrackInitialized = trackFullTime !== 0;\n\n    return (\n        <div className={audioPlayerHeadPlayingBarStyle.audio_player_head_playing_bar}>\n            <Time\n                className={audioPlayerHeadPlayingBarStyle.time}\n                currentTime={trackCurrentTime}\n                fullTime={trackFullTime}\n            />\n\n            <RangeBar\n                ariaLabel=\"progress bar\"\n                isDisable={!isTrackInitialized}\n                onChange={onChangeProgressBar}\n                progress={isTrackInitialized ? trackCurrentTime / trackFullTime : 0}\n            />\n\n            <AudioPlayerControlButton\n                ariaLabel=\"switch-sound\"\n                className=\"\"\n                imageId={soundImageSrc}\n                isHideForNarrow\n                onClick={onClickMuteVolume}\n            />\n\n            <RangeBar\n                ariaLabel=\"volume bar\"\n                className={audioPlayerHeadPlayingBarStyle.volume_bar}\n                isHideForNarrow\n                onChange={onChangeVolumeBar}\n                progress={trackVolume}\n            />\n        </div>\n    );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"audio_player_head_playing_bar\":\"bd925c\",\"time\":\"df7adc\",\"volume_bar\":\"da6e9c\"};","// extracted by mini-css-extract-plugin\nexport default {\"audio_player_head_controls\":\"b31ddf\"};","import {AudioPlayerControlButton} from '../../../layout/audio-player-control-button/c-audio-player-control-button';\n\nimport {PlayerPlayingStateType, PlayerRepeatingStateType} from '../../../../library';\nimport {playerPlayingStateTypeMap, playerRepeatingStateTypeMap} from '../../audio-player-const';\n\nimport AudioPlayerHeadControlsStyle from './audio-player-head-controls.scss';\n\nconst {one: repeatOne, all: repeatAll} = playerRepeatingStateTypeMap;\n\ntype PropsType = Readonly<{\n    isShuffleOn: boolean;\n    isTrackListOpen: boolean;\n    onClickNextTrack: () => void;\n    onClickPlay: () => void;\n    onClickPrevTrack: () => void;\n    onClickRepeat: () => void;\n\n    onClickShuffle: () => void;\n    onClickTrackList: () => void;\n    playingState: PlayerPlayingStateType;\n    repeatingState: PlayerRepeatingStateType;\n}>;\n\nexport function AudioPlayerHeadControls(props: PropsType): JSX.Element {\n    const {\n        onClickShuffle,\n        onClickRepeat,\n        onClickPrevTrack,\n        onClickPlay,\n        onClickNextTrack,\n        onClickTrackList,\n        playingState,\n        isShuffleOn,\n        repeatingState,\n        isTrackListOpen,\n    } = props;\n\n    const isPlaying = playingState === playerPlayingStateTypeMap.playing;\n\n    return (\n        <div className={AudioPlayerHeadControlsStyle.audio_player_head_controls}>\n            <AudioPlayerControlButton\n                ariaLabel=\"shuffle\"\n                imageId=\"button-shuffle\"\n                isActive={isShuffleOn}\n                onClick={onClickShuffle}\n            />\n\n            <AudioPlayerControlButton\n                ariaLabel=\"repeat\"\n                imageId={repeatingState === repeatOne ? 'button-repeat-one' : 'button-repeat'}\n                isActive={repeatingState === repeatOne || repeatingState === repeatAll}\n                onClick={onClickRepeat}\n            />\n\n            <AudioPlayerControlButton ariaLabel=\"prev\" imageId=\"button-prev-track\" onClick={onClickPrevTrack} />\n\n            {isPlaying ? (\n                <AudioPlayerControlButton ariaLabel=\"pause\" imageId=\"button-pause\" onClick={onClickPlay} />\n            ) : (\n                <AudioPlayerControlButton ariaLabel=\"play\" imageId=\"button-play\" onClick={onClickPlay} />\n            )}\n\n            <AudioPlayerControlButton ariaLabel=\"next\" imageId=\"button-next-track\" onClick={onClickNextTrack} />\n\n            <AudioPlayerControlButton\n                ariaLabel=\"track-list\"\n                imageId=\"button-track-list\"\n                isActive={isTrackListOpen}\n                onClick={onClickTrackList}\n            />\n        </div>\n    );\n}\n","import {PlayerPlayingStateType, PlayerRepeatingStateType} from '../../../library';\nimport {Spinner} from '../../layout/spinner/c-spinner';\n\nimport {AudioPlayerHeadPlayingBar} from './audio-player-head-playing-bar/c-audio-player-head-playing-bar';\nimport {AudioPlayerHeadControls} from './audio-player-head-controls/c-audio-player-head-controls';\n\nimport audioPlayerHeadStyle from './audio-player-head.scss';\n\ntype PropsType = Readonly<{\n    isLoading: boolean;\n    isMuted: boolean;\n    isShuffleOn: boolean;\n    isTrackListOpen: boolean;\n    onChangeProgressBar: (progress: number) => void;\n    onChangeVolumeBar: (volume: number) => void;\n    onClickMuteVolume: () => void;\n    onClickNextTrack: () => void;\n    onClickPlay: () => void;\n\n    onClickPrevTrack: () => void;\n    onClickRepeat: () => void;\n    onClickShuffle: () => void;\n    onClickTrackList: () => void;\n    playingState: PlayerPlayingStateType;\n    repeatingState: PlayerRepeatingStateType;\n    trackCurrentTime: number;\n    trackFullTime: number;\n    trackVolume: number;\n}>;\n\nexport function AudioPlayerHead(props: PropsType): JSX.Element {\n    const {\n        onClickShuffle,\n        onClickRepeat,\n        onClickPrevTrack,\n        onClickPlay,\n        onClickNextTrack,\n        onClickTrackList,\n        onClickMuteVolume,\n        onChangeProgressBar,\n        onChangeVolumeBar,\n\n        isMuted,\n        playingState,\n        isShuffleOn,\n        repeatingState,\n        isTrackListOpen,\n        trackCurrentTime,\n        trackVolume,\n        trackFullTime,\n        isLoading,\n    } = props;\n\n    return (\n        <div className={audioPlayerHeadStyle.audio_player_head}>\n            <Spinner\n                className={audioPlayerHeadStyle.spinner}\n                isShow={isLoading}\n                lineWidth={3}\n                position=\"absolute\"\n                size={26}\n                wrapperHeight={26}\n                wrapperPadding={0}\n                wrapperWidth={26}\n            />\n\n            <AudioPlayerHeadControls\n                isShuffleOn={isShuffleOn}\n                isTrackListOpen={isTrackListOpen}\n                onClickNextTrack={onClickNextTrack}\n                onClickPlay={onClickPlay}\n                onClickPrevTrack={onClickPrevTrack}\n                onClickRepeat={onClickRepeat}\n                onClickShuffle={onClickShuffle}\n                onClickTrackList={onClickTrackList}\n                playingState={playingState}\n                repeatingState={repeatingState}\n            />\n\n            <AudioPlayerHeadPlayingBar\n                isMuted={isMuted}\n                onChangeProgressBar={onChangeProgressBar}\n                onChangeVolumeBar={onChangeVolumeBar}\n                onClickMuteVolume={onClickMuteVolume}\n                trackCurrentTime={trackCurrentTime}\n                trackFullTime={trackFullTime}\n                trackVolume={trackVolume}\n            />\n        </div>\n    );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"audio_player_head\":\"fa9e1a\",\"spinner\":\"bcf8d9\"};","// extracted by mini-css-extract-plugin\nexport default {\"audio_player_track_list\":\"d6f4a6\"};","// extracted by mini-css-extract-plugin\nexport default {\"audio_player_track_list_item\":\"b48888\",\"audio_player_track_list_item__active\":\"b28ca0\",\"button\":\"bbcf1f\",\"button_image__active\":\"ef10a4\",\"button_image\":\"a7a82b\",\"content\":\"c4d018\",\"track_title\":\"bef821\",\"audio_tag\":\"b3c7d7\",\"track_time\":\"bee42b\",\"play_list_menu_button\":\"c0f54f\"};","/* global HTMLAudioElement */\n\nimport {useRef, useState} from 'react';\n\nimport {classNames} from '../../../lib/css';\nimport {PlayerPlayingStateType, TrackType} from '../../../../library';\nimport {playerPlayingStateTypeMap} from '../../audio-player-const';\nimport {SvgImage} from '../../../layout/svg-image/c-svg-image';\nimport {audioPlayerIconIdPrefix} from '../../../layout/audio-player-control-sprite/c-audio-player-control-sprite';\nimport {Spinner} from '../../../layout/spinner/c-spinner';\nimport {getTrackHumanTime} from '../../../lib/time';\n\nimport {PlayListMenuButton} from '../../../play-list/add-track-to-play-list-button/c-add-track-to-play-list-button';\n\nimport audioPlayerTrackListItemStyle from './audio-player-track-list-item.scss';\nimport {getActualContent} from './audio-player-track-list-item-helper';\n\ntype PropsType = Readonly<{\n    activeIndex: number;\n    isCurrentTrack: boolean;\n    isLoading: boolean;\n    onClickPlay: () => void;\n    playByIndex: (trackIndex: number) => void;\n    playingState: PlayerPlayingStateType;\n    setActiveIndex: (activeIndex: number) => void;\n    track: TrackType;\n}>;\n\nexport function AudioPlayerTrackListItem(props: PropsType): JSX.Element {\n    const {isCurrentTrack, activeIndex, track, playingState, onClickPlay, setActiveIndex, isLoading, playByIndex} =\n        props;\n\n    const {src, duration = 0, preload = 'auto'} = track;\n    const [trackFullTime, setTrackFullTime] = useState<number>(duration);\n    const {minutes: trackFullTimeMinutes, seconds: trackFullTimeSeconds} = getTrackHumanTime(trackFullTime);\n    const refAudio = useRef<HTMLAudioElement | null>(null);\n    const actualContent = getActualContent(track);\n\n    const spinner = <Spinner isShow={isLoading} lineWidth={4} position=\"absolute\" size={30} wrapperPadding={0} />;\n\n    const className = classNames(audioPlayerTrackListItemStyle.audio_player_track_list_item, {\n        [audioPlayerTrackListItemStyle.audio_player_track_list_item__active]: isCurrentTrack,\n    });\n\n    function getAudioTag(): HTMLAudioElement {\n        const audioTag = refAudio.current;\n\n        if (audioTag) {\n            return audioTag;\n        }\n\n        throw new Error('Audio tag is not exists');\n    }\n\n    function handleSetActiveIndex() {\n        setActiveIndex(activeIndex);\n    }\n\n    function handleSetActiveIndexAndPlay() {\n        playByIndex(activeIndex);\n    }\n\n    function handleOnLoadedMetadata() {\n        const audioTag = getAudioTag();\n\n        setTrackFullTime(audioTag.duration);\n    }\n\n    function renderButton(): JSX.Element {\n        const playImageId = '#' + audioPlayerIconIdPrefix + 'button-play';\n        const pauseImageId = '#' + audioPlayerIconIdPrefix + 'button-pause-playlist';\n        const accessibleName = 'play';\n\n        if (playingState === playerPlayingStateTypeMap.playing) {\n            if (isCurrentTrack) {\n                return (\n                    <button\n                        aria-label={accessibleName}\n                        className={audioPlayerTrackListItemStyle.button}\n                        onClick={onClickPlay}\n                        type=\"button\"\n                    >\n                        {spinner}\n\n                        <SvgImage\n                            className={audioPlayerTrackListItemStyle.button_image__active}\n                            imageId={pauseImageId}\n                        />\n                    </button>\n                );\n            }\n\n            return (\n                <button\n                    aria-label={accessibleName}\n                    className={audioPlayerTrackListItemStyle.button}\n                    onClick={handleSetActiveIndex}\n                    type=\"button\"\n                >\n                    <SvgImage className={audioPlayerTrackListItemStyle.button_image} imageId={playImageId} />\n                </button>\n            );\n        }\n\n        if (isCurrentTrack) {\n            return (\n                <button\n                    aria-label={accessibleName}\n                    className={audioPlayerTrackListItemStyle.button}\n                    onClick={onClickPlay}\n                    type=\"button\"\n                >\n                    {spinner}\n\n                    <SvgImage className={audioPlayerTrackListItemStyle.button_image} imageId={playImageId} />\n                </button>\n            );\n        }\n\n        return (\n            <button\n                aria-label={accessibleName}\n                className={audioPlayerTrackListItemStyle.button}\n                onClick={handleSetActiveIndexAndPlay}\n                type=\"button\"\n            >\n                <SvgImage className={audioPlayerTrackListItemStyle.button_image} imageId={playImageId} />\n            </button>\n        );\n    }\n\n    return (\n        <li className={className}>\n            <audio\n                className={audioPlayerTrackListItemStyle.audio_tag}\n                muted\n                onLoadedMetadata={handleOnLoadedMetadata}\n                preload={preload}\n                ref={refAudio}\n                src={src}\n            />\n\n            {renderButton()}\n\n            <div className={audioPlayerTrackListItemStyle.content}>\n                <div className={audioPlayerTrackListItemStyle.track_title}>{actualContent}</div>\n            </div>\n\n            <div className={audioPlayerTrackListItemStyle.track_time}>\n                {`${trackFullTimeMinutes}:${trackFullTimeSeconds}`}\n            </div>\n\n            <PlayListMenuButton className={audioPlayerTrackListItemStyle.play_list_menu_button} track={track} />\n        </li>\n    );\n}\n","import {SavedTrackType, TrackType} from '../../../../library';\n\n// eslint-disable-next-line complexity\nexport function getActualContent(track: SavedTrackType | TrackType): JSX.Element | string {\n    const {content, mediaMetadata, src} = track;\n\n    if (content) {\n        return content;\n    }\n\n    const mediaTitle = mediaMetadata && mediaMetadata.title;\n\n    if (mediaTitle) {\n        return mediaTitle;\n    }\n\n    const fileName = src.split('/').pop();\n\n    if (!fileName) {\n        return '';\n    }\n\n    const indexOfExtension = fileName.lastIndexOf('.');\n\n    if (indexOfExtension > 0) {\n        return fileName.slice(0, indexOfExtension);\n    }\n\n    return fileName;\n}\n","import {PlayerPlayingStateType, TrackType} from '../../../library';\n\nimport audioPlayerTrackListStyle from './audio-player-track-list.scss';\nimport {AudioPlayerTrackListItem} from './audio-player-track-list-item/c-audio-player-track-list-item';\n\ntype PropsType = Readonly<{\n    activeIndex: number;\n    isLoading: boolean;\n    onClickPlay: () => void;\n    playByIndex: (trackIndex: number) => void;\n    playingState: PlayerPlayingStateType;\n    setActiveIndex: (activeIndex: number) => void;\n    trackList: Array<TrackType>;\n}>;\n\nexport function AudioPlayerTrackList(props: PropsType): JSX.Element {\n    const {activeIndex, trackList, playingState, onClickPlay, setActiveIndex, isLoading, playByIndex} = props;\n\n    return (\n        <ul className={audioPlayerTrackListStyle.audio_player_track_list}>\n            {trackList.map((track: TrackType, index: number): JSX.Element => {\n                const isCurrentTrack = activeIndex === index;\n\n                return (\n                    <AudioPlayerTrackListItem\n                        activeIndex={index}\n                        isCurrentTrack={isCurrentTrack}\n                        isLoading={isLoading ? isCurrentTrack : false}\n                        key={track.src}\n                        onClickPlay={onClickPlay}\n                        playByIndex={playByIndex}\n                        playingState={playingState}\n                        setActiveIndex={setActiveIndex}\n                        track={track}\n                    />\n                );\n            })}\n        </ul>\n    );\n}\n","/* global document, HTMLAudioElement */\n\nimport {useEffect, useRef, useState} from 'react';\n\nimport {setMediaMetadata} from '../lib/media-meta-data/media-meta-data';\nimport {getRandom, getShiftIndex} from '../lib/number';\nimport {DefaultAudioPlayerStateType, PlayerPlayingStateType, PlayerRepeatingStateType, TrackType} from '../../library';\n\nimport {AudioPlayerHead} from './audio-player-head/c-audio-player-head';\nimport {AudioPlayerTrackList} from './audio-player-track-list/c-audio-player-track-list';\n\nimport {\n    playerPlayingStateTypeMap,\n    playerRepeatingStateTypeList,\n    playerRepeatingStateTypeMap,\n    seekStepSecond,\n} from './audio-player-const';\n\nimport {getDefaultState, getStopHandler} from './audio-player-helper';\nimport audioPlayerStyle from './audio-player.scss';\n\nexport type AudioPlayerPropsType = Readonly<{\n    className?: string;\n    defaultState?: DefaultAudioPlayerStateType;\n    onDidMount?: (audioNode: HTMLAudioElement | null) => void;\n    trackList: Array<TrackType>;\n}>;\n\n// eslint-disable-next-line complexity, max-statements, sonarjs/cognitive-complexity\nexport function AudioPlayer(props: AudioPlayerPropsType): JSX.Element {\n    const {defaultState, className, onDidMount, trackList} = props;\n\n    const defaultDefinedState = getDefaultState(defaultState);\n    const duration: number = trackList[0]?.duration || 0;\n\n    const [trackCurrentTime, setTrackCurrentTime] = useState<number>(0);\n    const [trackFullTime, setTrackFullTime] = useState<number>(duration);\n    const [trackVolume, setTrackVolume] = useState<number>(1);\n    const [isMuted, setIsMuted] = useState<boolean>(defaultDefinedState.isMuted);\n    const [playingState, setPlayingState] = useState<PlayerPlayingStateType>(playerPlayingStateTypeMap.paused);\n    const [activeIndex, setActiveIndex] = useState<number>(defaultDefinedState.activeIndex);\n    const [isShuffleOn, setIsShuffleOn] = useState<boolean>(defaultDefinedState.isShuffleOn);\n    const [repeatingState, setRepeatingState] = useState<PlayerRepeatingStateType>(defaultDefinedState.repeatingState);\n    const [isTrackListOpen, setIsTrackListOpen] = useState<boolean>(defaultDefinedState.isTrackListOpen);\n    const [isLoadingMetadata, setIsLoadingMetadata] = useState<boolean>(false);\n    const [isOnEndState, setIsOnEndState] = useState<boolean>(false);\n    const refAudio = useRef<HTMLAudioElement | null>(null);\n\n    function getAudioTag(): HTMLAudioElement {\n        const audioTag = refAudio.current;\n\n        if (audioTag) {\n            return audioTag;\n        }\n\n        console.error('Audio tag is not exists');\n\n        return document.createElement('audio');\n    }\n\n    useEffect(() => {\n        const audioTag = getAudioTag();\n\n        if (onDidMount) {\n            onDidMount(audioTag);\n        }\n    }, [onDidMount]);\n\n    function getTrackByIndex(trackIndex: number): TrackType | null {\n        return trackList[trackIndex] || null;\n    }\n\n    function getCurrentTrack(): TrackType | null {\n        return getTrackByIndex(activeIndex);\n    }\n\n    function setActiveTrackIndex(newActiveIndex: number) {\n        setActiveIndex(newActiveIndex);\n        setIsLoadingMetadata(true);\n        setTrackCurrentTime(0);\n        setTrackFullTime(0);\n\n        // eslint-disable-next-line no-use-before-define, @typescript-eslint/no-use-before-define\n        updateMediaMetadata();\n    }\n\n    function handleClickNextTrack() {\n        const nextIndex = getShiftIndex(trackList.length, activeIndex, 1);\n\n        setActiveTrackIndex(nextIndex);\n    }\n\n    function handleClickPrevTrack() {\n        const nextIndex = getShiftIndex(trackList.length, activeIndex, -1);\n\n        setActiveTrackIndex(nextIndex);\n    }\n\n    function seekForward() {\n        const audioTag = getAudioTag();\n\n        audioTag.currentTime += seekStepSecond;\n    }\n\n    function seekBackward() {\n        const audioTag = getAudioTag();\n\n        audioTag.currentTime -= seekStepSecond;\n    }\n\n    function updateMediaMetadata() {\n        const track = getCurrentTrack();\n\n        if (!track) {\n            return;\n        }\n\n        const {mediaMetadata} = track;\n\n        if (mediaMetadata) {\n            setMediaMetadata(mediaMetadata, {\n                // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                nexttrack: handleClickNextTrack,\n                // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                previoustrack: handleClickPrevTrack,\n                // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                seekbackward: seekBackward,\n                // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                seekforward: seekForward,\n                stop: getStopHandler(getAudioTag()),\n            });\n        }\n    }\n\n    function getCurrentTrackSrcAsString(): string {\n        const track = getCurrentTrack();\n\n        return track ? track.src : '';\n    }\n\n    function handleAudioTagOnLoadedMetadata() {\n        const audioTag = getAudioTag();\n\n        setIsLoadingMetadata(false);\n        setTrackFullTime(audioTag.duration);\n        audioTag.volume = trackVolume;\n    }\n\n    function handleAudioTagOnPause() {\n        setPlayingState(playerPlayingStateTypeMap.paused);\n    }\n\n    function handleAudioTagOnVolumeChange() {\n        const audioTag = getAudioTag();\n\n        setIsMuted(audioTag.muted);\n        setTrackVolume(audioTag.volume);\n    }\n\n    function handleClickPlay() {\n        const audioTag = getAudioTag();\n\n        if (audioTag.paused) {\n            audioTag.play();\n        } else {\n            audioTag.pause();\n        }\n    }\n\n    // eslint-disable-next-line complexity, max-statements\n    function handleAudioTagOnEnded() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars\n        const {one: repeatOne, all: repeatAll, none: repeatNone} = playerRepeatingStateTypeMap;\n        const trackListLength = trackList.length;\n\n        setIsOnEndState(true);\n\n        if (trackListLength <= 1) {\n            setActiveIndex(0);\n            setTrackCurrentTime(0);\n\n            return;\n        }\n\n        if (isShuffleOn) {\n            const randomActiveIndex = getRandom(0, trackListLength, [activeIndex]);\n\n            setActiveTrackIndex(randomActiveIndex);\n            return;\n        }\n\n        if (repeatingState === repeatOne) {\n            setIsOnEndState(false);\n            handleClickPlay();\n            return;\n        }\n\n        if (repeatingState === repeatAll) {\n            handleClickNextTrack();\n            return;\n        }\n\n        // repeatingState === repeatNone, no last track\n        if (activeIndex < trackListLength - 1) {\n            handleClickNextTrack();\n            return;\n        }\n\n        // repeatingState === repeatNone, last track\n        setIsOnEndState(false);\n        setActiveTrackIndex(0);\n    }\n\n    function handleAudioTagOnPlay() {\n        setPlayingState(playerPlayingStateTypeMap.playing);\n        updateMediaMetadata();\n    }\n\n    function handleAudioTagCanOnPlay() {\n        if (isOnEndState) {\n            setIsOnEndState(false);\n            handleClickPlay();\n        }\n    }\n\n    function handleAudioTagOnTimeUpdate() {\n        const audioTag = getAudioTag();\n\n        setTrackCurrentTime(audioTag.currentTime);\n    }\n\n    function handleClickMute() {\n        const audioTag = getAudioTag();\n\n        const isNewMuted = !audioTag.muted;\n\n        audioTag.muted = isNewMuted;\n\n        setIsMuted(isNewMuted);\n    }\n\n    function handleClickShuffle() {\n        setIsShuffleOn(!isShuffleOn);\n    }\n\n    function handleClickRepeat() {\n        const currentIndex = playerRepeatingStateTypeList.indexOf(repeatingState);\n        const nextIndex = (currentIndex + 1) % playerRepeatingStateTypeList.length;\n\n        setRepeatingState(playerRepeatingStateTypeList[nextIndex]);\n    }\n\n    function handleClickShowHideTrackList() {\n        setIsTrackListOpen(!isTrackListOpen);\n    }\n\n    function handleChangeProgressBar(trackCurrentProgress: number) {\n        const audioTag = getAudioTag();\n\n        audioTag.currentTime = trackCurrentProgress * trackFullTime;\n    }\n\n    function handleChangeVolumeBar(VolumeBarValue: number) {\n        const audioTag = getAudioTag();\n\n        audioTag.volume = VolumeBarValue;\n    }\n\n    function playByIndex(trackIndex: number) {\n        setActiveIndex(trackIndex);\n        setIsLoadingMetadata(true);\n\n        const audioTag = getAudioTag();\n\n        function handleOnCanPlay() {\n            setIsLoadingMetadata(false);\n\n            audioTag.removeEventListener('canplay', handleOnCanPlay, false);\n\n            audioTag.play();\n        }\n\n        audioTag.addEventListener('canplay', handleOnCanPlay, false);\n    }\n\n    return (\n        <div className={className || ''}>\n            <audio\n                autoPlay={playingState === playerPlayingStateTypeMap.playing}\n                className={audioPlayerStyle.audio_tag}\n                key=\"audio-tag\"\n                muted={isMuted}\n                onCanPlay={handleAudioTagCanOnPlay}\n                onEnded={handleAudioTagOnEnded}\n                onLoadedMetadata={handleAudioTagOnLoadedMetadata}\n                onPause={handleAudioTagOnPause}\n                onPlay={handleAudioTagOnPlay}\n                onTimeUpdate={handleAudioTagOnTimeUpdate}\n                onVolumeChange={handleAudioTagOnVolumeChange}\n                preload=\"metadata\"\n                ref={refAudio}\n                src={getCurrentTrackSrcAsString()}\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                volume={trackVolume} // eslint-disable-line react/no-unknown-property\n            >\n                <track kind=\"captions\" src={getCurrentTrackSrcAsString()} />\n            </audio>\n\n            <AudioPlayerHead\n                isLoading={isLoadingMetadata}\n                isMuted={isMuted}\n                isShuffleOn={isShuffleOn}\n                isTrackListOpen={isTrackListOpen}\n                onChangeProgressBar={handleChangeProgressBar}\n                onChangeVolumeBar={handleChangeVolumeBar}\n                onClickMuteVolume={handleClickMute}\n                onClickNextTrack={handleClickNextTrack}\n                onClickPlay={handleClickPlay}\n                onClickPrevTrack={handleClickPrevTrack}\n                onClickRepeat={handleClickRepeat}\n                onClickShuffle={handleClickShuffle}\n                onClickTrackList={handleClickShowHideTrackList}\n                playingState={playingState}\n                repeatingState={repeatingState}\n                trackCurrentTime={trackCurrentTime}\n                trackFullTime={trackFullTime}\n                trackVolume={trackVolume}\n            />\n\n            {isTrackListOpen ? (\n                <AudioPlayerTrackList\n                    activeIndex={activeIndex}\n                    isLoading={isLoadingMetadata}\n                    onClickPlay={handleClickPlay}\n                    playByIndex={playByIndex}\n                    playingState={playingState}\n                    setActiveIndex={setActiveTrackIndex}\n                    trackList={trackList}\n                />\n            ) : null}\n        </div>\n    );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"audio_tag\":\"e2ec9c\"};","/* global localStorage */\n\nimport {PlayListType} from './play-list-context-type';\nimport {defaultPlayListName} from './play-list-context-const';\n\nconst localStorageKeyName = 'react-audio-player-play-list-storage-key-v.1.0.0';\n\ntype SavedDataType = Array<PlayListType>;\n\nfunction getDefaultPlayListContextData(): SavedDataType {\n    return [\n        {\n            name: defaultPlayListName,\n            // isDefault: true,\n            trackList: [],\n        },\n    ];\n}\n\nexport function savePlayListContextData(data: SavedDataType): void {\n    if (typeof localStorage === 'undefined') {\n        return;\n    }\n\n    localStorage.setItem(localStorageKeyName, JSON.stringify(data));\n}\n\nexport function getSavedPlayListContextData(): SavedDataType {\n    if (typeof localStorage === 'undefined') {\n        return getDefaultPlayListContextData();\n    }\n\n    const rawData = localStorage.getItem(localStorageKeyName);\n\n    if (rawData) {\n        // TODO: add type chek here\n        return JSON.parse(rawData);\n    }\n\n    return getDefaultPlayListContextData();\n}\n","import {useCallback, useEffect, useMemo, useState, ReactNode} from 'react';\n\nimport {SavedTrackType} from '../../../library';\nimport {getRandomStringBySize} from '../../lib/string';\n\nimport {PlayListContextType, PlayListType} from './play-list-context-type';\nimport {getSavedPlayListContextData, savePlayListContextData} from './play-list-context-storage';\nimport {defaultPlayListName} from './play-list-context-const';\nimport {PlayListContext} from './play-list-context';\n\nexport type PlayListProviderPropsType = Readonly<{children: ReactNode}>;\n\nexport function PlayListProvider(props: PlayListProviderPropsType): JSX.Element {\n    const {children} = props;\n    const [list, setList] = useState<Array<PlayListType>>(getSavedPlayListContextData());\n\n    const getTrackById = useCallback(\n        function getTrackByIdInner(trackId: string): SavedTrackType | null {\n            const listLength = list.length;\n\n            // eslint-disable-next-line no-loops/no-loops\n            for (let playListIndex = 0; playListIndex < listLength; playListIndex += 1) {\n                const {trackList} = list[playListIndex];\n                const trackListLength = trackList.length;\n\n                // eslint-disable-next-line no-loops/no-loops\n                for (let trackIndex = 0; trackIndex < trackListLength; trackIndex += 1) {\n                    const track = trackList[trackIndex];\n\n                    if (track.id === trackId) {\n                        return track;\n                    }\n                }\n            }\n\n            return null;\n        },\n        [list]\n    );\n\n    const createPlayList = useCallback(\n        function createPlayListInner(): PlayListType {\n            const newPlayList: PlayListType = {\n                name: defaultPlayListName + ' ' + getRandomStringBySize(4),\n                trackList: [],\n                // isDefault: false,\n            };\n\n            const newList = [...list, newPlayList];\n\n            setList(newList);\n\n            return newPlayList;\n        },\n        [list, setList]\n    );\n\n    const getAllPlayLists = useCallback(\n        function getAllPlayListsInner(): Array<PlayListType> {\n            return [...list];\n        },\n        [list]\n    );\n\n    const updatePlayList = useCallback(\n        function updatePlayListInner(oldPlayList: PlayListType, newListPlayData: PlayListType): Error | PlayListType {\n            const newList = [...list];\n\n            const playListIndex = newList.indexOf(oldPlayList);\n\n            if (playListIndex < 0) {\n                return new Error('Old Play List is not exists.');\n            }\n\n            newList[playListIndex] = newListPlayData;\n\n            setList(newList);\n\n            return newListPlayData;\n        },\n        [list, setList]\n    );\n\n    const deletePlayList = useCallback(\n        function deletePlayListInner(playList: PlayListType): Error | null {\n            const newList = [...list];\n\n            const playListIndex = newList.indexOf(playList);\n\n            if (playListIndex < 0) {\n                return new Error('Play List is not exists.');\n            }\n\n            newList.splice(playListIndex, 1);\n\n            setList(newList);\n\n            return null;\n        },\n        [list, setList]\n    );\n\n    const removeTrackById = useCallback(\n        function removeTrackInner(trackId: string): Error | null {\n            const listLength = list.length;\n\n            // eslint-disable-next-line no-loops/no-loops\n            for (let playListIndex = 0; playListIndex < listLength; playListIndex += 1) {\n                const playList = list[playListIndex];\n                const {trackList} = playList;\n                const trackListLength = trackList.length;\n\n                // eslint-disable-next-line no-loops/no-loops\n                for (let trackIndex = 0; trackIndex < trackListLength; trackIndex += 1) {\n                    const track = trackList[trackIndex];\n\n                    if (track.id === trackId) {\n                        const newTrackList = [...trackList];\n\n                        newTrackList.splice(trackIndex, 1);\n\n                        updatePlayList(playList, {\n                            ...playList,\n                            trackList: newTrackList,\n                        });\n\n                        return null;\n                    }\n                }\n            }\n\n            return new Error('Track is not exists.');\n        },\n        [list, updatePlayList]\n    );\n\n    const providedData: PlayListContextType = useMemo<PlayListContextType>((): PlayListContextType => {\n        return {\n            createPlayList,\n            deletePlayList,\n            getAllPlayLists,\n            getTrackById,\n            isInitialized: true,\n            removeTrackById,\n            updatePlayList,\n        };\n    }, [createPlayList, getAllPlayLists, updatePlayList, deletePlayList, removeTrackById, getTrackById]);\n\n    useEffect(() => {\n        savePlayListContextData(list);\n    }, [list]);\n\n    return <PlayListContext.Provider value={providedData}>{children}</PlayListContext.Provider>;\n}\n","/* global HTMLInputElement */\n\nimport {useCallback, useContext, useRef} from 'react';\n\nimport {PlayListType} from '../../../../provider/play-list/play-list-context-type';\nimport {PlayListContext} from '../../../../provider/play-list/play-list-context';\nimport {noNamePlayListName} from '../../../../provider/play-list/play-list-context-const';\n// import {IsRender} from '../../../../layout/is-render/c-is-render';\nimport {AudioPlayer} from '../../../../audio-player/c-audio-player';\nimport {savedTrackToTrack} from '../../../../provider/play-list/play-list-context-helper';\nimport {AudioPlayerControlButton} from '../../../../layout/audio-player-control-button/c-audio-player-control-button';\n\nimport playListContainerStyle from './play-list-container.scss';\n\ntype PropsType = Readonly<{\n    playList: PlayListType;\n}>;\n\nexport function PlayListContainer(props: PropsType): JSX.Element {\n    const {playList} = props;\n    const {trackList, name: playListName} = playList;\n    const inputPlayListNameRef = useRef<HTMLInputElement | null>(null);\n\n    const playListContextData = useContext(PlayListContext);\n    const {updatePlayList, deletePlayList, getAllPlayLists} = playListContextData;\n    const allPlayLists = getAllPlayLists();\n    const hasTrackInList = trackList.length > 0;\n\n    function getInputPlayListName(): HTMLInputElement {\n        return (\n            inputPlayListNameRef.current ||\n            (() => {\n                throw new Error('Can not get input of play list name');\n            })()\n        );\n    }\n\n    const handleOnBlurPlayListName = useCallback(\n        function handleOnBlurPlayListNameInner() {\n            updatePlayList(playList, {\n                name: getInputPlayListName().value.trim(),\n                trackList,\n            });\n        },\n        [updatePlayList, playList, trackList]\n    );\n\n    const handleRemovePlayList = useCallback(\n        function handleRemovePlayListInner() {\n            deletePlayList(playList);\n        },\n        [deletePlayList, playList]\n    );\n\n    const useRemovePlayListButton = allPlayLists.length > 1 && trackList.length === 0;\n    const removePlayListButtonClassName = useRemovePlayListButton\n        ? playListContainerStyle.remove_play_list_button_active\n        : playListContainerStyle.remove_play_list_button;\n\n    return (\n        <div className={playListContainerStyle.play_list_container}>\n            <div className={playListContainerStyle.header_container}>\n                <input\n                    className={playListContainerStyle.header_input}\n                    defaultValue={playListName}\n                    onBlur={handleOnBlurPlayListName}\n                    placeholder={noNamePlayListName}\n                    ref={inputPlayListNameRef}\n                    type=\"text\"\n                />\n\n                <AudioPlayerControlButton\n                    ariaLabel=\"delete\"\n                    className={removePlayListButtonClassName}\n                    imageId=\"trash-bin\"\n                    onClick={handleRemovePlayList}\n                />\n            </div>\n\n            {hasTrackInList ? (\n                <AudioPlayer\n                    // defaultState={{isTrackListOpen: false}}\n                    trackList={trackList.map(savedTrackToTrack)}\n                />\n            ) : (\n                <p className={playListContainerStyle.no_track_here}>∅</p>\n            )}\n        </div>\n    );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"play_list_container\":\"aec634\",\"header_input\":\"f500e1\",\"remove_play_list_button_active\":\"a470ec\",\"remove_play_list_button\":\"e85b98\",\"header_container\":\"fe1637\",\"no_track_here\":\"ecef14\"};","import {PlayListType} from '../../provider/play-list/play-list-context-type';\n\nimport {PlayListContainer} from './list-of-play-list/play-list-container/c-play-list-container';\n\nexport function renderPlayListContainer(playList: PlayListType, index: number): JSX.Element {\n    return <PlayListContainer key={playList.name + '-' + String(index)} playList={playList} />;\n}\n","import {useContext} from 'react';\n\nimport {PlayListContext} from '../../provider/play-list/play-list-context';\nimport {AudioPlayerControlButton} from '../../layout/audio-player-control-button/c-audio-player-control-button';\n\nimport playListPanelStyle from './play-list-panel.scss';\nimport {renderPlayListContainer} from './play-list-panel-helper';\n\nexport function PlayListPanel(): JSX.Element {\n    const playListContextData = useContext(PlayListContext);\n    const {createPlayList, getAllPlayLists} = playListContextData;\n    const listOfPlayList = getAllPlayLists();\n\n    return (\n        <div className={playListPanelStyle.play_list_panel}>\n            {listOfPlayList.map(renderPlayListContainer)}\n\n            <div className={playListPanelStyle.add_play_list_wrapper}>\n                <AudioPlayerControlButton\n                    ariaLabel=\"add play list\"\n                    className={playListPanelStyle.add_play_list_button}\n                    imageId=\"play-list-plus\"\n                    onClick={createPlayList}\n                />\n            </div>\n        </div>\n    );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"play_list_panel\":\"a7ad0a\",\"add_play_list_wrapper\":\"b59941\",\"add_play_list_button\":\"dd564f\"};"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","classNames","argumentList","classNameList","classNameData","push","join","playerPlayingStateTypeMap","playerRepeatingStateTypeMap","all","none","one","playerRepeatingStateTypeList","defaultAudioPlayerState","activeIndex","isMuted","isShuffleOn","isTrackListOpen","repeatingState","SvgImage","props","className","imageId","xlinkHref","audioPlayerIconIdPrefix","mainFillColor","defaultViewBox","xmlns","AudioPlayerControlSprite","id","viewBox","d","fill","audioPlayerControlTagNameMap","cssImage","AudioPlayerControlButton","onClick","isActive","ariaLabel","tag","hasBorder","isHideForNarrow","fullClassName","image","type","getTrackHumanTime","timeInSeconds","minutes","String","Math","floor","seconds","padStart","Time","currentTime","fullTime","timeProgress","currentTimeInSeconds","fullTimeInSeconds","currentTimeMinutes","currentTimeSeconds","fullTimeMinutes","fullTimeSeconds","getProgressHumanTime","RangeBar","isMouseDown","setIsMouseDown","useState","inputRef","useRef","isDisable","progress","onChange","onPointerDown","onPointerUp","style","transform","left","defaultValue","max","min","current","Number","parseFloat","getCurrentValue","ref","step","mediaMetadataControlNameList","setMediaMetadata","mediaMetadata","mediaMetadataControlSetting","navigator","MediaMetadata","mediaSession","metadata","controlName","setActionHandler","clearMediaMetadata","getStopHandler","audioTag","addEventListener","handleCanPlay","removeEventListener","play","then","pause","isTracksEquals","trackA","trackB","src","savedTrackToTrack","savedTrack","content","track","defaultPlayListContextData","defaultPlayList","name","trackList","createPlayList","deletePlayList","playList","Error","getAllPlayLists","getTrackById","trackId","isInitialized","removeTrackById","updatePlayList","oldPlayList","newListPlayData","getDefaultPlayListContextData","PlayListContext","createContext","getRandomString","round","random","toString","getRandomOne","defaultPlayListName","noNamePlayListName","PlayListMenuButton","playListContextData","useContext","selectKey","setSelectKey","isPlayListContextInitialized","listOfPlayList","defaultSelectValue","handleAddTrack","useCallback","evt","selectNode","currentTarget","listIndex","parseInt","preload","duration","existsSavedTrack","find","trackToSave","newTrackList","disabled","map","index","isTrackExistsInPlayList","trim","text","Audio","downloadFileName","onDidMount","useRepeatButton","refAudio","trackCurrentTime","setTrackCurrentTime","trackFullTime","setTrackFullTime","trackVolume","setTrackVolume","setIsMuted","playingState","setPlayingState","isRepeatOn","setIsRepeatOn","soundImageId","getAudioTag","handleClickPlay","seekForward","seekBackward","useEffect","onEnded","onLoadedMetadata","volume","onPause","onPlay","seek","seekbackward","seekforward","stop","title","onTimeUpdate","onVolumeChange","muted","kind","audioTagTrackCurrentTime","audioTagIsMuted","volumeBarValue","download","href","getShiftIndex","listLength","currentIndex","shift","rawIndex","getRandom","fromInclude","toExclude","excludeList","randomNumber","includes","positionValueMap","size","defaultSize","Spinner","rawSize","lineWidth","arcColor","circleColor","isShow","wrapperWidth","wrapperHeight","position","rawPosition","wrapperColor","wrapperPadding","spinnerImageStyle","borderColor","borderTopColor","borderWidth","height","width","spinnerWrapperStyle","backgroundColor","minHeight","minWidth","padding","AudioPlayerHeadPlayingBar","onClickMuteVolume","onChangeProgressBar","onChangeVolumeBar","soundImageSrc","isTrackInitialized","repeatOne","repeatAll","AudioPlayerHeadControls","onClickShuffle","onClickRepeat","onClickPrevTrack","onClickPlay","onClickNextTrack","onClickTrackList","isPlaying","AudioPlayerHead","isLoading","AudioPlayerTrackListItem","isCurrentTrack","setActiveIndex","playByIndex","trackFullTimeMinutes","trackFullTimeSeconds","actualContent","mediaTitle","fileName","split","pop","indexOfExtension","lastIndexOf","slice","getActualContent","spinner","handleSetActiveIndex","handleSetActiveIndexAndPlay","playImageId","pauseImageId","accessibleName","renderButton","AudioPlayerTrackList","AudioPlayer","defaultState","defaultDefinedState","getDefaultState","setIsShuffleOn","setRepeatingState","setIsTrackListOpen","isLoadingMetadata","setIsLoadingMetadata","isOnEndState","setIsOnEndState","console","error","document","createElement","getCurrentTrack","setActiveTrackIndex","newActiveIndex","updateMediaMetadata","handleClickNextTrack","length","handleClickPrevTrack","nexttrack","previoustrack","getCurrentTrackSrcAsString","paused","autoPlay","onCanPlay","repeatNone","trackListLength","trackCurrentProgress","VolumeBarValue","isNewMuted","nextIndex","indexOf","trackIndex","handleOnCanPlay","localStorageKeyName","PlayListProvider","children","list","setList","localStorage","rawData","getItem","JSON","parse","getSavedPlayListContextData","playListIndex","newPlayList","Array","from","sort","newList","splice","providedData","useMemo","data","setItem","stringify","Provider","PlayListContainer","playListName","inputPlayListNameRef","allPlayLists","hasTrackInList","handleOnBlurPlayListName","handleRemovePlayList","removePlayListButtonClassName","onBlur","placeholder","renderPlayListContainer","PlayListPanel"],"sourceRoot":""}