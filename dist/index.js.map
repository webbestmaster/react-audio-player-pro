{"version":3,"file":"index.js","mappings":"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","sources":["webpack://react-audio-player-pro/webpack/bootstrap","webpack://react-audio-player-pro/webpack/runtime/define property getters","webpack://react-audio-player-pro/webpack/runtime/hasOwnProperty shorthand","webpack://react-audio-player-pro/webpack/runtime/make namespace object","webpack://react-audio-player-pro/external commonjs \"react/jsx-runtime\"","webpack://react-audio-player-pro/external commonjs \"react\"","webpack://react-audio-player-pro/./www/library/src/lib/css.ts","webpack://react-audio-player-pro/./www/library/src/audio-player/audio-player-const.ts","webpack://react-audio-player-pro/./www/library/src/layout/svg-image/c-svg-image.tsx","webpack://react-audio-player-pro/./www/library/src/layout/audio-player-control-sprite/audio-player-control-sprite.scss?0a74","webpack://react-audio-player-pro/./www/library/src/layout/audio-player-control-sprite/c-audio-player-control-sprite.tsx","webpack://react-audio-player-pro/./www/library/src/layout/audio-player-control-button/audio-player-control-button-const.ts","webpack://react-audio-player-pro/./www/library/src/layout/audio-player-control-button/c-audio-player-control-button.tsx","webpack://react-audio-player-pro/./www/library/src/layout/audio-player-control-button/audio-player-control-button.scss?3a7a","webpack://react-audio-player-pro/./www/library/src/lib/time.ts","webpack://react-audio-player-pro/./www/library/src/layout/time/time.scss?43fb","webpack://react-audio-player-pro/./www/library/src/layout/time/c-time.tsx","webpack://react-audio-player-pro/./www/library/src/layout/range-bar/range-bar.scss?d378","webpack://react-audio-player-pro/./www/library/src/layout/range-bar/range-bar-const.ts","webpack://react-audio-player-pro/./www/library/src/layout/range-bar/c-range-bar.tsx","webpack://react-audio-player-pro/./www/library/src/lib/media-meta-data/media-meta-data-const.ts","webpack://react-audio-player-pro/./www/library/src/lib/media-meta-data/media-meta-data.ts","webpack://react-audio-player-pro/./www/library/src/audio-player/audio-player-helper.ts","webpack://react-audio-player-pro/./www/library/src/provider/play-list/play-list-context-helper.ts","webpack://react-audio-player-pro/./www/library/src/provider/play-list/play-list-context.tsx","webpack://react-audio-player-pro/./www/library/src/lib/string.ts","webpack://react-audio-player-pro/./www/library/src/provider/play-list/play-list-context-const.ts","webpack://react-audio-player-pro/./www/library/src/play-list/add-track-to-play-list-button/add-track-to-play-list-button.scss?da6e","webpack://react-audio-player-pro/./www/library/src/play-list/add-track-to-play-list-button/c-add-track-to-play-list-button.tsx","webpack://react-audio-player-pro/./www/library/src/audio-player/audio/audio.scss?9e57","webpack://react-audio-player-pro/./www/library/src/audio-player/audio/c-audio.tsx","webpack://react-audio-player-pro/./www/library/src/lib/number.ts","webpack://react-audio-player-pro/./www/library/src/layout/spinner/spinner.scss?fbfc","webpack://react-audio-player-pro/./www/library/src/layout/spinner/spinner-const.ts","webpack://react-audio-player-pro/./www/library/src/layout/spinner/c-spinner.tsx","webpack://react-audio-player-pro/./www/library/src/audio-player/audio-player-head/audio-player-head-playing-bar/audio-player-head-playing-bar.scss?b465","webpack://react-audio-player-pro/./www/library/src/audio-player/audio-player-head/audio-player-head-playing-bar/c-audio-player-head-playing-bar.tsx","webpack://react-audio-player-pro/./www/library/src/audio-player/audio-player-head/audio-player-head-controls/audio-player-head-controls.scss?acb0","webpack://react-audio-player-pro/./www/library/src/audio-player/audio-player-head/audio-player-head-controls/c-audio-player-head-controls.tsx","webpack://react-audio-player-pro/./www/library/src/audio-player/audio-player-head/audio-player-head.scss?d7e1","webpack://react-audio-player-pro/./www/library/src/audio-player/audio-player-head/c-audio-player-head.tsx","webpack://react-audio-player-pro/./www/library/src/audio-player/audio-player-track-list/audio-player-track-list.scss?1f30","webpack://react-audio-player-pro/./www/library/src/audio-player/audio-player-track-list/audio-player-track-list-item/audio-player-track-list-item.scss?a5b3","webpack://react-audio-player-pro/./www/library/src/audio-player/audio-player-track-list/audio-player-track-list-item/c-audio-player-track-list-item.tsx","webpack://react-audio-player-pro/./www/library/src/audio-player/audio-player-track-list/audio-player-track-list-item/audio-player-track-list-item-helper.ts","webpack://react-audio-player-pro/./www/library/src/audio-player/audio-player-track-list/c-audio-player-track-list.tsx","webpack://react-audio-player-pro/./www/library/src/audio-player/audio-player.scss?fce0","webpack://react-audio-player-pro/./www/library/src/audio-player/c-audio-player.tsx","webpack://react-audio-player-pro/./www/library/src/provider/play-list/play-list-context-storage.ts","webpack://react-audio-player-pro/./www/library/src/provider/play-list/c-play-list-context.tsx","webpack://react-audio-player-pro/./www/library/src/play-list/play-list-panel/play-list-panel.scss?990d","webpack://react-audio-player-pro/./www/library/src/play-list/play-list-panel/list-of-play-list/play-list-container/play-list-container.scss?d020","webpack://react-audio-player-pro/./www/library/src/play-list/play-list-panel/list-of-play-list/play-list-container/c-play-list-container.tsx","webpack://react-audio-player-pro/./www/library/src/play-list/play-list-panel/play-list-panel-helper.tsx","webpack://react-audio-player-pro/./www/library/src/play-list/play-list-panel/c-play-list-panel.tsx"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"react/jsx-runtime\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"react\");","type ClassNamesArgumentValueType = string | null | undefined;\n\ntype ClassNamesArgumentType = ClassNamesArgumentValueType | Record<string, ClassNamesArgumentValueType | boolean>;\n\nexport function cls(...argumentList: ReadonlyArray<ClassNamesArgumentType>): string {\n    const classNameList: Array<string> = [];\n\n    for (const classNameData of argumentList) {\n        // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n        if (!classNameData) {\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n\n        if (typeof classNameData === \"string\") {\n            classNameList.push(classNameData);\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n\n        for (const key in classNameData) {\n            // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n            if (classNameData[key]) {\n                classNameList.push(key);\n            }\n        }\n    }\n\n    return classNameList.join(\" \");\n}\n","/* eslint-disable capitalized-comments */\n\nimport type {DefaultDefinedAudioPlayerStateType, PlayerPlayingStateType, PlayerRepeatingStateType} from \"../../library\";\n\n/*\nimport type {\n    AudioPlayerContextType,\n    AudioPlayerListItemType,\n    MediaMetadataType,\n    PlayerRepeatingStateType,\n} from './audio-player-type';\n*/\n\nexport const seekStepSecond = 10;\n\nexport const playerPlayingStateTypeMap: Record<PlayerPlayingStateType, PlayerPlayingStateType> = {\n    paused: \"paused\",\n    playing: \"playing\",\n    stopped: \"stopped\",\n};\n\nexport const playerRepeatingStateTypeMap: Record<PlayerRepeatingStateType, PlayerRepeatingStateType> = {\n    all: \"all\",\n    none: \"none\",\n    one: \"one\",\n};\n\nconst {none, all, one} = playerRepeatingStateTypeMap;\n\nexport const playerRepeatingStateTypeList: Array<PlayerRepeatingStateType> = [none, all, one];\n\nexport const defaultAudioPlayerState: DefaultDefinedAudioPlayerStateType = {\n    activeIndex: 0,\n    isMuted: false,\n    isShuffleOn: false,\n    isTrackListOpen: true,\n    repeatingState: none,\n};\n","interface PropsType {\n    readonly className: string;\n    readonly imageId: string;\n}\n\nexport function SvgImage(props: PropsType): JSX.Element {\n    const {className, imageId} = props;\n\n    return (\n        <svg className={className}>\n            <use xlinkHref={imageId} />\n        </svg>\n    );\n}\n","// extracted by mini-css-extract-plugin\nvar _1 = \"e05e18\";\nexport { _1 as \"hidden\" }\n","/* eslint-disable max-len */\n\nimport * as audioPlayerControlSpriteStyle from \"./audio-player-control-sprite.scss\";\n\nexport const audioPlayerIconIdPrefix = \"audio-player-icon-id-prefix-\";\nconst mainFillColor = \"#5a5a5a\";\nconst defaultViewBox = \"0 0 24 24\";\nconst xmlns = \"http://www.w3.org/2000/svg\";\n\nexport function AudioPlayerControlSprite(): JSX.Element {\n    return (\n        <svg className={audioPlayerControlSpriteStyle.hidden}>\n            <symbol id={`${audioPlayerIconIdPrefix}button-pause-playlist`} viewBox={defaultViewBox} xmlns={xmlns}>\n                <path\n                    d=\"M14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.84-5 6.7v2.07c4-.91 7-4.49 7-8.77 0-4.28-3-7.86-7-8.77M16.5 12c0-1.77-1-3.29-2.5-4.03V16c1.5-.71 2.5-2.24 2.5-4M3 9v6h4l5 5V4L7 9H3z\"\n                    fill=\"#4285f4\"\n                />\n            </symbol>\n\n            <symbol id={`${audioPlayerIconIdPrefix}button-pause`} viewBox={defaultViewBox} xmlns={xmlns}>\n                <path d=\"M14 19h4V5h-4M6 19h4V5H6v14z\" fill={mainFillColor} />\n            </symbol>\n\n            <symbol id={`${audioPlayerIconIdPrefix}button-play`} viewBox={defaultViewBox} xmlns={xmlns}>\n                <path d=\"M8 5.14v14l11-7-11-7z\" fill={mainFillColor} />\n            </symbol>\n\n            <symbol id={`${audioPlayerIconIdPrefix}button-track-list`} viewBox=\"-1 -1 23 23\" xmlns={xmlns}>\n                <path d=\"M19 9H2v2h17V9m0-4H2v2h17V5M2 15h13v-2H2v2m15-2v6l5-3-5-3z\" fill={mainFillColor} />\n            </symbol>\n\n            <symbol id={`${audioPlayerIconIdPrefix}button-prev-track`} viewBox={defaultViewBox} xmlns={xmlns}>\n                <path d=\"M6 6h2v12H6zm3.5 6l8.5 6V6z\" fill={mainFillColor} />\n            </symbol>\n\n            <symbol id={`${audioPlayerIconIdPrefix}button-next-track`} viewBox={defaultViewBox} xmlns={xmlns}>\n                <path d=\"M6 18l8.5-6L6 6v12zM16 6v12h2V6h-2z\" fill={mainFillColor} />\n            </symbol>\n\n            <symbol id={`${audioPlayerIconIdPrefix}button-repeat`} viewBox={defaultViewBox} xmlns={xmlns}>\n                <path d=\"M17 17H7v-3l-4 4 4 4v-3h12v-6h-2M7 7h10v3l4-4-4-4v3H5v6h2V7z\" fill={mainFillColor} />\n            </symbol>\n\n            <symbol id={`${audioPlayerIconIdPrefix}button-repeat-one`} viewBox={defaultViewBox} xmlns={xmlns}>\n                <path\n                    d=\"M13 15V9h-1l-2 1v1h1.5v4m5.5 2H7v-3l-4 4 4 4v-3h12v-6h-2M7 7h10v3l4-4-4-4v3H5v6h2V7z\"\n                    fill={mainFillColor}\n                />\n            </symbol>\n\n            <symbol id={`${audioPlayerIconIdPrefix}button-shuffle`} viewBox={defaultViewBox} xmlns={xmlns}>\n                <path\n                    d=\"M14.83 13.41l-1.41 1.41 3.13 3.13L14.5 20H20v-5.5l-2.04 2.04-3.13-3.13M14.5 4l2.04 2.04L4 18.59 5.41 20 17.96 7.46 20 9.5V4m-9.41 5.17L5.41 4 4 5.41l5.17 5.17 1.42-1.41z\"\n                    fill={mainFillColor}\n                />\n            </symbol>\n\n            <symbol id={`${audioPlayerIconIdPrefix}button-sound-off`} viewBox={defaultViewBox} xmlns={xmlns}>\n                <path\n                    d=\"M12 4L9.91 6.09 12 8.18M4.27 3L3 4.27 7.73 9H3v6h4l5 5v-6.73l4.25 4.26c-.67.51-1.42.93-2.25 1.17v2.07c1.38-.32 2.63-.95 3.68-1.81L19.73 21 21 19.73l-9-9M19 12c0 .94-.2 1.82-.54 2.64l1.51 1.51A8.916 8.916 0 0 0 21 12c0-4.28-3-7.86-7-8.77v2.06c2.89.86 5 3.54 5 6.71m-2.5 0c0-1.77-1-3.29-2.5-4.03v2.21l2.45 2.45c.05-.2.05-.42.05-.63z\"\n                    fill={mainFillColor}\n                />\n            </symbol>\n\n            <symbol id={`${audioPlayerIconIdPrefix}button-sound-on`} viewBox={defaultViewBox} xmlns={xmlns}>\n                <path\n                    d=\"M14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.84-5 6.7v2.07c4-.91 7-4.49 7-8.77 0-4.28-3-7.86-7-8.77M16.5 12c0-1.77-1-3.29-2.5-4.03V16c1.5-.71 2.5-2.24 2.5-4M3 9v6h4l5 5V4L7 9H3z\"\n                    fill={mainFillColor}\n                />\n            </symbol>\n\n            <symbol id={`${audioPlayerIconIdPrefix}button-download`} viewBox={defaultViewBox} xmlns={xmlns}>\n                <path d=\"M5,20H19V18H5M19,9H15V3H9V9H5L12,16L19,9Z\" fill={mainFillColor} />\n            </symbol>\n\n            <symbol id={`${audioPlayerIconIdPrefix}play-list-menu`} viewBox={defaultViewBox} xmlns={xmlns}>\n                <path\n                    d=\"M15 6H3v2h12V6zm0 4H3v2h12v-2zM3 16h8v-2H3v2zM17 6v8.18c-.31-.11-.65-.18-1-.18-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3V8h3V6h-5z\"\n                    fill={mainFillColor}\n                />\n            </symbol>\n\n            <symbol id={`${audioPlayerIconIdPrefix}play-list-plus`} viewBox=\"-1 -1 23 23\" xmlns={xmlns}>\n                <path\n                    d=\"M14 10H2v2h12v-2zm0-4H2v2h12V6zm4 8v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zM2 16h8v-2H2v2z\"\n                    fill={mainFillColor}\n                />\n            </symbol>\n\n            <symbol id={`${audioPlayerIconIdPrefix}trash-bin`} viewBox={defaultViewBox} xmlns={xmlns}>\n                <path\n                    d=\"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zm2.46-7.12l1.41-1.41L12 12.59l2.12-2.12 1.41 1.41L13.41 14l2.12 2.12-1.41 1.41L12 15.41l-2.12 2.12-1.41-1.41L10.59 14l-2.13-2.12zM15.5 4l-1-1h-5l-1 1H5v2h14V4z\"\n                    fill={mainFillColor}\n                />\n            </symbol>\n        </svg>\n    );\n}\n","import type {AudioPlayerControlTagNameType} from \"./audio-player-control-button-type\";\n\nexport const audioPlayerControlTagNameMap: Record<AudioPlayerControlTagNameType, AudioPlayerControlTagNameType> = {\n    div: \"div\",\n    span: \"span\",\n};\n","import {cls} from \"../../lib/css\";\nimport {SvgImage} from \"../svg-image/c-svg-image\";\nimport {audioPlayerIconIdPrefix} from \"../audio-player-control-sprite/c-audio-player-control-sprite\";\n\nimport * as audioPlayerControlStyle from \"./audio-player-control-button.scss\";\nimport type {AudioPlayerControlTagNameType} from \"./audio-player-control-button-type\";\nimport {audioPlayerControlTagNameMap} from \"./audio-player-control-button-const\";\n\nconst cssButton = audioPlayerControlStyle.audio_player_control__button;\nconst cssActive = audioPlayerControlStyle.audio_player_control__button__active;\nconst cssWidthBorder = audioPlayerControlStyle.audio_player_control__button__bordered;\nconst cssImage = audioPlayerControlStyle.audio_player_control__button__image;\nconst hideForNarrow = audioPlayerControlStyle.audio_player_control__hide_for_narrow;\n\ntype PropsType = Readonly<{\n    ariaLabel: string;\n\n    className?: string;\n    hasBorder?: boolean;\n    imageId: string;\n    isActive?: boolean;\n    isHideForNarrow?: boolean;\n    onClick?: () => unknown;\n    tag?: AudioPlayerControlTagNameType;\n}>;\n\nexport function AudioPlayerControlButton(props: PropsType): JSX.Element {\n    const {onClick, imageId, isActive, ariaLabel, className, tag, hasBorder, isHideForNarrow} = props;\n    const fullClassName = cls(\n        cssButton,\n        {\n            [cssActive]: isActive,\n            [cssWidthBorder]: hasBorder,\n            [hideForNarrow]: isHideForNarrow,\n        },\n        className\n    );\n\n    const image = <SvgImage className={cssImage} imageId={`#${audioPlayerIconIdPrefix}${imageId}`} />;\n\n    if (tag === audioPlayerControlTagNameMap.div) {\n        return <div className={fullClassName}>{image}</div>;\n    }\n\n    if (tag === audioPlayerControlTagNameMap.span) {\n        return <span className={fullClassName}>{image}</span>;\n    }\n\n    return (\n        <button aria-label={ariaLabel} className={fullClassName} onClick={onClick} type=\"button\">\n            <SvgImage className={cssImage} imageId={`#${audioPlayerIconIdPrefix}${imageId}`} />\n        </button>\n    );\n}\n","// extracted by mini-css-extract-plugin\nvar _1 = \"bff2b5\";\nvar _2 = \"a45085\";\nvar _3 = \"fde0b7\";\nvar _4 = \"ba5145\";\nvar _5 = \"ac7b4a\";\nvar _6 = \"ab5ee0\";\nexport { _1 as \"audio_player_control__button\", _2 as \"audio_player_control__button__active\", _3 as \"audio_player_control__button__bordered\", _4 as \"audio_player_control__button__disabled\", _5 as \"audio_player_control__button__image\", _6 as \"audio_player_control__hide_for_narrow\" }\n","type TrackHumanTimeType = Readonly<{\n    minutes: string;\n    seconds: string;\n}>;\n\nexport function getTrackHumanTime(timeInSeconds: number): TrackHumanTimeType {\n    return {\n        minutes: String(Math.floor(timeInSeconds / 60)),\n        seconds: String(Math.floor(timeInSeconds % 60)).padStart(2, \"0\"),\n    };\n}\n\nexport function getProgressHumanTime(currentTimeInSeconds: number, fullTimeInSeconds: number): string {\n    const {minutes: currentTimeMinutes, seconds: currentTimeSeconds} = getTrackHumanTime(currentTimeInSeconds);\n    const {minutes: fullTimeMinutes, seconds: fullTimeSeconds} = getTrackHumanTime(fullTimeInSeconds);\n\n    const currentTimeResult = `${currentTimeMinutes}:${currentTimeSeconds}`;\n    const fullTimeResult = `${fullTimeMinutes}:${fullTimeSeconds}`;\n\n    return `${currentTimeResult} / ${fullTimeResult}`;\n}\n","// extracted by mini-css-extract-plugin\nvar _1 = \"c7b08a\";\nexport { _1 as \"time\" }\n","import {getProgressHumanTime} from \"../../lib/time\";\nimport {cls} from \"../../lib/css\";\n\nimport * as timeStyle from \"./time.scss\";\n\ninterface PropsType {\n    readonly className?: string;\n    readonly currentTime: number;\n    readonly fullTime: number;\n}\n\nexport function Time(props: PropsType): JSX.Element {\n    const {currentTime, fullTime, className} = props;\n\n    const fullClassName = cls(timeStyle.time, className);\n    const timeProgress = getProgressHumanTime(currentTime, fullTime);\n\n    return <span className={fullClassName}>{timeProgress}</span>;\n}\n","// extracted by mini-css-extract-plugin\nvar _1 = \"f9d0be\";\nvar _2 = \"f79532\";\nvar _3 = \"eee1d0\";\nvar _4 = \"c44fc5\";\nvar _5 = \"cc7be8\";\nvar _6 = \"e0b58b\";\nvar _7 = \"e13c85\";\nvar _8 = \"d6d969\";\nvar _9 = \"c0ae57\";\nexport { _1 as \"input_range\", _2 as \"point_bar\", _3 as \"point_bar__wrapper\", _4 as \"progress_bar\", _5 as \"progress_bar__wrapper\", _6 as \"range_bar\", _7 as \"range_bar__hide_for_narrow\", _8 as \"wrapper__active\", _9 as \"wrapper__disable\" }\n","export const inputData = {\n    defaultValue: 0,\n    max: 1,\n    min: 0,\n    step: 0.001,\n};\n","/* global HTMLInputElement */\n\nimport {useRef, useState} from \"react\";\n\nimport {cls} from \"../../lib/css\";\n\nimport * as rangeBarStyle from \"./range-bar.scss\";\nimport {inputData} from \"./range-bar-const\";\n\ntype PropsType = Readonly<{\n    ariaLabel: string;\n\n    className?: string;\n    isDisable?: boolean;\n    isHideForNarrow?: boolean;\n    onChange: (value: number) => void;\n    progress: number;\n}>;\n\nexport function RangeBar(props: PropsType): JSX.Element {\n    const [isMouseDown, setIsMouseDown] = useState<boolean>(false);\n    const inputRef = useRef<HTMLInputElement | null>(null);\n\n    const {className, isDisable, progress, onChange, ariaLabel, isHideForNarrow} = props;\n\n    function getCurrentValue(): number {\n        const {current} = inputRef;\n\n        if (!current) {\n            return 0;\n        }\n\n        return Number.parseFloat(current.value);\n    }\n\n    function handleMouseDown(): void {\n        setIsMouseDown(true);\n    }\n\n    function handleMouseUp(): void {\n        setIsMouseDown(false);\n    }\n\n    function handleProgressBarChange(): void {\n        onChange(getCurrentValue());\n    }\n\n    const fullClassName = cls(rangeBarStyle.range_bar, className, {\n        [rangeBarStyle.wrapper__active]: isMouseDown,\n        [rangeBarStyle.wrapper__disable]: isDisable === true,\n        [rangeBarStyle.range_bar__hide_for_narrow]: isHideForNarrow,\n    });\n\n    return (\n        <div className={fullClassName} onPointerDown={handleMouseDown} onPointerUp={handleMouseUp}>\n            <div className={rangeBarStyle.progress_bar__wrapper}>\n                <div\n                    className={rangeBarStyle.progress_bar}\n                    style={{transform: `translateZ(0) scaleX(${progress || 0})`}}\n                />\n            </div>\n\n            <div className={rangeBarStyle.point_bar__wrapper}>\n                <div className={rangeBarStyle.point_bar} style={{left: `${progress * 100}%`}} />\n            </div>\n\n            <input\n                aria-label={ariaLabel}\n                className={rangeBarStyle.input_range}\n                defaultValue={inputData.defaultValue}\n                max={inputData.max}\n                min={inputData.min}\n                onChange={handleProgressBarChange}\n                ref={inputRef}\n                step={inputData.step}\n                type=\"range\"\n            />\n        </div>\n    );\n}\n","/* global MediaSessionAction */\n\nexport const mediaMetadataControlNameList: Array<MediaSessionAction> = [\n    \"nexttrack\",\n    \"pause\",\n    \"play\",\n    \"previoustrack\",\n    \"seekbackward\",\n    \"seekforward\",\n];\n","/* global navigator, MediaMetadata, MediaMetadataInit */\n\nimport type {MediaMetadataControlSettingType} from \"./media-meta-data-type\";\nimport {mediaMetadataControlNameList} from \"./media-meta-data-const\";\n\nexport function clearMediaMetadata(): void {\n    if (typeof navigator === \"undefined\" || typeof MediaMetadata === \"undefined\") {\n        return;\n    }\n\n    if (!(\"mediaSession\" in navigator)) {\n        return;\n    }\n\n    navigator.mediaSession.metadata = null;\n\n    for (const controlName of mediaMetadataControlNameList) {\n        navigator.mediaSession.setActionHandler(controlName, null);\n    }\n}\n\nexport function setMediaMetadata(\n    mediaMetadata: MediaMetadataInit,\n    mediaMetadataControlSetting?: MediaMetadataControlSettingType\n): void {\n    if (typeof navigator === \"undefined\" || typeof MediaMetadata === \"undefined\") {\n        return;\n    }\n\n    if (!(\"mediaSession\" in navigator)) {\n        return;\n    }\n\n    clearMediaMetadata();\n\n    navigator.mediaSession.metadata = new MediaMetadata(mediaMetadata);\n\n    if (!mediaMetadataControlSetting) {\n        return;\n    }\n\n    for (const controlName of mediaMetadataControlNameList) {\n        navigator.mediaSession.setActionHandler(controlName, mediaMetadataControlSetting[controlName] ?? null);\n    }\n}\n","/* global HTMLAudioElement*/\n\nimport type {DefaultAudioPlayerStateType, DefaultDefinedAudioPlayerStateType} from \"../../library\";\n\nimport {defaultAudioPlayerState} from \"./audio-player-const\";\n\nexport function getDefaultState(defaultState?: DefaultAudioPlayerStateType): DefaultDefinedAudioPlayerStateType {\n    if (defaultState) {\n        return {\n            ...defaultAudioPlayerState,\n            ...defaultState,\n        };\n    }\n\n    return defaultAudioPlayerState;\n}\n\nexport function getStopHandler(audioTag: HTMLAudioElement): () => void {\n    return function handleOnStop() {\n        audioTag.currentTime = 0;\n\n        function handleCanPlay(): void {\n            audioTag.removeEventListener(\"canplay\", handleCanPlay, false);\n\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            audioTag.play().then(() => {\n                audioTag.pause();\n\n                audioTag.currentTime = 0;\n            });\n        }\n\n        audioTag.addEventListener(\"canplay\", handleCanPlay, false);\n    };\n}\n","/* eslint-disable capitalized-comments */\n\nimport type {SavedTrackType, TrackType} from \"../../../library\";\n\nimport type {PlayListContextType, PlayListType} from \"./play-list-context-type\";\n\nexport function getDefaultPlayListContextData(): PlayListContextType {\n    const defaultPlayList: PlayListType = {\n        name: \"\",\n        trackList: [],\n        // isDefault: false,\n    };\n\n    return {\n        createPlayList: (): PlayListType => {\n            return defaultPlayList;\n        },\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        deletePlayList: (playList: PlayListType): Error | null => {\n            return new Error(\"deletePlayList: overwrite me\");\n        },\n        getAllPlayLists: (): Array<PlayListType> => {\n            return [defaultPlayList];\n        },\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        getTrackById: (trackId: string): SavedTrackType | null => {\n            return null;\n        },\n        isInitialized: false,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        removeTrackById: (trackId: string): Error | null => {\n            return new Error(\"removeTrack: overwrite me\");\n        },\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        updatePlayList: (oldPlayList: PlayListType, updatedListPlayData: PlayListType): Error | PlayListType => {\n            return new Error(\"updatePlayList: overwrite me\");\n        },\n    };\n}\n\n/*\nexport function getTrackContentAsString(track: TrackType): string {\n    const {content, mediaMetadata} = track;\n\n    if (typeof content === 'string') {\n        return content;\n    }\n\n    if (mediaMetadata) {\n        return mediaMetadata.title;\n    }\n\n    return track.src;\n}\n*/\n\n/*\nexport function getTrackList(list: Array<PlayListType>): Array<SavedTrackType> {\n    const resultList: Array<SavedTrackType> = [];\n\n    list.forEach((playList: PlayListType) => {\n        resultList.push(...playList.trackList);\n    });\n\n    return resultList;\n}\n*/\n\n/*\nexport function getTrackListIdList(trackList: Array<SavedTrackType>): Array<string> {\n    return trackList.map<string>((track: SavedTrackType): string => track.id);\n}\n*/\n\nexport function isTracksEquals(trackA: SavedTrackType | TrackType, trackB: SavedTrackType | TrackType): boolean {\n    return trackA.src === trackB.src;\n}\n\nexport function savedTrackToTrack(savedTrack: SavedTrackType): TrackType {\n    const {src, mediaMetadata, content} = savedTrack;\n\n    let track: TrackType = {src};\n\n    if (mediaMetadata) {\n        track = {...track, mediaMetadata};\n    }\n\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    if (content) {\n        track = {...track, content};\n    }\n\n    return track;\n}\n\n/*\nexport function savedTrackListToTrackList(list: Array<SavedTrackType>): Array<TrackType> {\n    return list.map(savedTrackToTrack);\n}\n*/\n","import {type Context, createContext} from \"react\";\n\nimport type {PlayListContextType} from \"./play-list-context-type\";\nimport {getDefaultPlayListContextData} from \"./play-list-context-helper\";\n\nconst defaultPlayListContextData = getDefaultPlayListContextData();\n\nexport const PlayListContext: Context<PlayListContextType> =\n    createContext<PlayListContextType>(defaultPlayListContextData);\n","/* eslint-disable capitalized-comments */\n\n// const openTagRegExp = /<\\w[\\S\\s]*?>/g;\n// const closeTagRegExp = /<\\/\\w*?>/g;\n// const selfCloseTagRegExp = /<\\w[\\S\\s]*?\\/>/g;\n\n/*\nexport function extractText(html: string): string {\n    return (\n        html\n            // remove open tags\n            .replace(openTagRegExp, '')\n            // remove close tags\n            .replace(closeTagRegExp, '')\n            // remove self close tags\n            .replace(selfCloseTagRegExp, '')\n            .trim()\n    );\n}\n*/\n\n// for 1e6 return string witch length 5 symbols, min - '0',  max - 'f4240'\nexport function getRandomString(): string {\n    return Math.round(1e6 * Math.random()).toString(16);\n}\n\nfunction getRandomOne(): -1 | 1 {\n    return Math.random() > 0.5 ? 1 : -1;\n}\n\nexport function getRandomStringBySize(size: number): string {\n    // eslint-disable-next-line newline-per-chained-call\n    return Array.from({length: size}).map(getRandomString).sort(getRandomOne).join(\"\").slice(0, size);\n}\n","export const defaultPlayListName = \"Play list\";\nexport const noNamePlayListName = \"No name playlist\";\n","// extracted by mini-css-extract-plugin\nvar _1 = \"cf10f9\";\nvar _2 = \"b8f0f4\";\nvar _3 = \"f2a1b7\";\nexport { _1 as \"add_track_to_play_list_button\", _2 as \"content_wrapper\", _3 as \"select_play_list\" }\n","/* global HTMLSelectElement */\n\nimport {useCallback, useContext, useState, type SyntheticEvent} from \"react\";\n\nimport {cls} from \"../../lib/css\";\nimport {PlayListContext} from \"../../provider/play-list/play-list-context\";\nimport type {SavedTrackType, TrackType} from \"../../../library\";\nimport {isTracksEquals} from \"../../provider/play-list/play-list-context-helper\";\nimport {getRandomString} from \"../../lib/string\";\nimport type {PlayListType} from \"../../provider/play-list/play-list-context-type\";\nimport {noNamePlayListName} from \"../../provider/play-list/play-list-context-const\";\nimport {AudioPlayerControlButton} from \"../../layout/audio-player-control-button/c-audio-player-control-button\";\n\nimport * as addTrackToPlayListButtonStyle from \"./add-track-to-play-list-button.scss\";\n\ntype PropsType = Readonly<{\n    className?: string;\n    track: TrackType;\n}>;\n\nexport function PlayListMenuButton(props: PropsType): JSX.Element | null {\n    const {className, track} = props;\n    const fullClassName = cls(addTrackToPlayListButtonStyle.add_track_to_play_list_button, className);\n    const playListContextData = useContext(PlayListContext);\n    const [selectKey, setSelectKey] = useState<number>(0);\n    const {\n        getAllPlayLists,\n        updatePlayList,\n        removeTrackById,\n        isInitialized: isPlayListContextInitialized,\n    } = playListContextData;\n    const listOfPlayList = getAllPlayLists();\n    const defaultSelectValue = \"-1\";\n\n    const handleAddTrack = useCallback(\n        // eslint-disable-next-line max-statements\n        (evt: SyntheticEvent<HTMLSelectElement>) => {\n            const selectNode = evt.currentTarget;\n            const listIndex = Number.parseInt(selectNode.value, 10);\n            const playList = listOfPlayList.at(listIndex);\n            const {src, mediaMetadata, content, preload, duration} = track;\n\n            setSelectKey(selectKey + 1);\n\n            if (!playList) {\n                console.log(\"Can not get play list by index\", listIndex);\n                return;\n            }\n\n            const existsSavedTrack = playList.trackList.find((savedTrack: SavedTrackType): boolean => {\n                return isTracksEquals(savedTrack, track);\n            });\n\n            if (existsSavedTrack) {\n                removeTrackById(existsSavedTrack.id);\n                return;\n            }\n\n            let trackToSave: SavedTrackType = {\n                id: getRandomString(),\n                src,\n            };\n\n            if (mediaMetadata) {\n                trackToSave = {\n                    ...trackToSave,\n                    mediaMetadata,\n                };\n            }\n\n            if (typeof content === \"string\") {\n                trackToSave = {\n                    ...trackToSave,\n                    content,\n                };\n            }\n\n            if (typeof preload === \"string\") {\n                trackToSave = {\n                    ...trackToSave,\n                    preload,\n                };\n            }\n\n            if (typeof duration === \"number\") {\n                trackToSave = {\n                    ...trackToSave,\n                    duration,\n                };\n            }\n\n            const updatedTrackList: Array<SavedTrackType> = [trackToSave, ...playList.trackList];\n\n            updatePlayList(playList, {\n                ...playList,\n                trackList: updatedTrackList,\n            });\n\n            selectNode.value = defaultSelectValue;\n\n            console.log(\"---> track added to list!\");\n            console.log(trackToSave);\n            console.log(playList);\n        },\n        [listOfPlayList, updatePlayList, track, defaultSelectValue, removeTrackById, setSelectKey, selectKey]\n    );\n\n    if (!isPlayListContextInitialized) {\n        return null;\n    }\n\n    return (\n        <label className={addTrackToPlayListButtonStyle.content_wrapper}>\n            <AudioPlayerControlButton ariaLabel=\"play list menu\" className={fullClassName} imageId=\"play-list-menu\" />\n\n            <select\n                className={addTrackToPlayListButtonStyle.select_play_list}\n                defaultValue={defaultSelectValue}\n                key={selectKey}\n                onChange={handleAddTrack}\n            >\n                <option disabled value={defaultSelectValue}>\n                    &nbsp;\n                </option>\n\n                {listOfPlayList.map((playList: PlayListType, index: number): JSX.Element => {\n                    const isTrackExistsInPlayList = playList.trackList.find((savedTrack: SavedTrackType): boolean => {\n                        return isTracksEquals(savedTrack, track);\n                    });\n\n                    const name = playList.name.trim() || noNamePlayListName;\n                    const actionSign = isTrackExistsInPlayList ? \"[✓]\" : \"[_]\";\n                    const text = `${actionSign} ${name}`;\n\n                    return (\n                        <option key={String(index) + name} value={index}>\n                            {text}\n                        </option>\n                    );\n                })}\n            </select>\n        </label>\n    );\n}\n","// extracted by mini-css-extract-plugin\nvar _1 = \"ce6c17\";\nvar _2 = \"e22549\";\nvar _3 = \"a3d9e7\";\nvar _4 = \"cae029\";\nvar _5 = \"e154e9\";\nexport { _1 as \"audio\", _2 as \"audio_tag\", _3 as \"download_button\", _4 as \"sound_range\", _5 as \"time\" }\n","/* global HTMLAudioElement, MediaMetadataInit */\n\nimport {useEffect, useRef, useState} from \"react\";\n\nimport {cls} from \"../../lib/css\";\nimport {playerPlayingStateTypeMap, seekStepSecond} from \"../audio-player-const\";\nimport {AudioPlayerControlButton} from \"../../layout/audio-player-control-button/c-audio-player-control-button\";\nimport {Time} from \"../../layout/time/c-time\";\nimport type {AudioPreloadValueType, PlayerPlayingStateType, TrackType} from \"../../../library\";\nimport {RangeBar} from \"../../layout/range-bar/c-range-bar\";\nimport {setMediaMetadata} from \"../../lib/media-meta-data/media-meta-data\";\nimport {getStopHandler} from \"../audio-player-helper\";\nimport {PlayListMenuButton} from \"../../play-list/add-track-to-play-list-button/c-add-track-to-play-list-button\";\nimport {audioPlayerControlTagNameMap} from \"../../layout/audio-player-control-button/audio-player-control-button-const\";\n\nimport * as audioStyle from \"./audio.scss\";\n\nexport interface AudioPropsType {\n    readonly className?: string;\n    readonly downloadFileName?: string;\n    readonly duration?: number;\n    readonly mediaMetadata?: MediaMetadataInit;\n    readonly onDidMount?: (audioNode: HTMLAudioElement | null) => void;\n    readonly preload?: AudioPreloadValueType;\n    readonly src: string;\n    readonly useRepeatButton?: boolean;\n}\n\n// eslint-disable-next-line max-statements\nexport function Audio(props: AudioPropsType): JSX.Element {\n    const {\n        className,\n        downloadFileName,\n        duration = 0,\n        mediaMetadata,\n        onDidMount,\n        preload = \"auto\",\n        src,\n        useRepeatButton = false,\n    } = props;\n\n    const refAudio = useRef<HTMLAudioElement | null>(null);\n    const [trackCurrentTime, setTrackCurrentTime] = useState<number>(0);\n    const [trackFullTime, setTrackFullTime] = useState<number>(duration);\n    const [trackVolume, setTrackVolume] = useState<number>(1);\n    const [isMuted, setIsMuted] = useState<boolean>(false);\n    const [playingState, setPlayingState] = useState<PlayerPlayingStateType>(playerPlayingStateTypeMap.paused);\n    const [isRepeatOn, setIsRepeatOn] = useState<boolean>(false);\n    const isActualMuted = isMuted || trackVolume === 0;\n    const soundImageId = isActualMuted ? \"button-sound-off\" : \"button-sound-on\";\n\n    function getAudioTag(): HTMLAudioElement {\n        const audioTag = refAudio.current;\n\n        if (audioTag) {\n            return audioTag;\n        }\n\n        throw new Error(\"Audio tag is not exists\");\n    }\n\n    function handleClickPlay(): void {\n        const audioTag = getAudioTag();\n\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        audioTag.play();\n    }\n\n    function handleOnEnded(): void {\n        const audioTag = getAudioTag();\n\n        audioTag.currentTime = 0;\n\n        if (isRepeatOn) {\n            setTrackCurrentTime(0);\n            handleClickPlay();\n            return;\n        }\n\n        setPlayingState(playerPlayingStateTypeMap.paused);\n        setTrackCurrentTime(0);\n    }\n\n    function handleOnLoadedMetadata(): void {\n        const audioTag = getAudioTag();\n\n        setTrackCurrentTime(0);\n        setTrackFullTime(audioTag.duration);\n\n        audioTag.volume = trackVolume;\n    }\n\n    function handleOnPause(): void {\n        setPlayingState(playerPlayingStateTypeMap.paused);\n    }\n\n    function seekForward(): void {\n        const audioTag = getAudioTag();\n\n        audioTag.currentTime += seekStepSecond;\n    }\n\n    function seekBackward(): void {\n        const audioTag = getAudioTag();\n\n        audioTag.currentTime -= seekStepSecond;\n    }\n\n    function handleOnPlay(): void {\n        setPlayingState(playerPlayingStateTypeMap.playing);\n\n        const seek = {\n            seekbackward: seekBackward,\n            seekforward: seekForward,\n            stop: getStopHandler(getAudioTag()),\n        };\n\n        if (mediaMetadata) {\n            setMediaMetadata(mediaMetadata, seek);\n            return;\n        }\n\n        setMediaMetadata({title: src}, seek);\n    }\n\n    function handleOnTimeUpdate(): void {\n        const audioTag = getAudioTag();\n\n        setTrackCurrentTime(audioTag.currentTime);\n    }\n\n    function handleOnVolumeChange(): void {\n        const audioTag = getAudioTag();\n\n        setIsMuted(audioTag.muted);\n        setTrackVolume(audioTag.volume);\n    }\n\n    function handleClickPause(): void {\n        const audioTag = getAudioTag();\n\n        audioTag.pause();\n    }\n\n    function handleClickRepeat(): void {\n        setIsRepeatOn(!isRepeatOn);\n    }\n\n    function handleOnChangeProgressBar(progress: number): void {\n        const audioTag = getAudioTag();\n        const audioTagTrackCurrentTime = progress * trackFullTime;\n\n        audioTag.currentTime = audioTagTrackCurrentTime;\n\n        setTrackCurrentTime(audioTagTrackCurrentTime);\n    }\n\n    function handleClickToggleMute(): void {\n        const audioTag = getAudioTag();\n        const audioTagIsMuted = !audioTag.muted;\n\n        audioTag.muted = audioTagIsMuted;\n        setIsMuted(audioTagIsMuted);\n    }\n\n    function handleChangeVolumeBar(volumeBarValue: number): void {\n        const audioTag = getAudioTag();\n\n        audioTag.volume = volumeBarValue;\n\n        setTrackVolume(volumeBarValue);\n    }\n\n    useEffect(() => {\n        const audioTag = getAudioTag();\n\n        if (onDidMount) {\n            onDidMount(audioTag);\n        }\n    }, [onDidMount]);\n\n    const track: TrackType = mediaMetadata ? {mediaMetadata, src} : {src};\n\n    return (\n        <div className={cls(audioStyle.audio, className)}>\n            <audio\n                className={audioStyle.audio_tag}\n                onEnded={handleOnEnded}\n                onLoadedMetadata={handleOnLoadedMetadata}\n                onPause={handleOnPause}\n                onPlay={handleOnPlay}\n                onTimeUpdate={handleOnTimeUpdate}\n                onVolumeChange={handleOnVolumeChange}\n                preload={preload}\n                ref={refAudio}\n                src={src}\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment, @typescript-eslint/prefer-ts-expect-error\n                // @ts-ignore\n                volume={trackVolume}\n            >\n                <track kind=\"captions\" src={src} />\n            </audio>\n\n            {playingState === playerPlayingStateTypeMap.playing ? (\n                <AudioPlayerControlButton ariaLabel=\"pause\" imageId=\"button-pause\" onClick={handleClickPause} />\n            ) : (\n                <AudioPlayerControlButton ariaLabel=\"play\" imageId=\"button-play\" onClick={handleClickPlay} />\n            )}\n\n            {useRepeatButton ? (\n                <AudioPlayerControlButton\n                    ariaLabel=\"repeat\"\n                    imageId=\"button-repeat\"\n                    isActive={isRepeatOn}\n                    onClick={handleClickRepeat}\n                />\n            ) : null}\n\n            <Time className={audioStyle.time} currentTime={trackCurrentTime} fullTime={trackFullTime} />\n\n            <RangeBar\n                ariaLabel=\"progress bar\"\n                onChange={handleOnChangeProgressBar}\n                progress={trackCurrentTime / trackFullTime}\n            />\n\n            <AudioPlayerControlButton\n                ariaLabel=\"switch-sound\"\n                imageId={soundImageId}\n                isHideForNarrow\n                onClick={handleClickToggleMute}\n            />\n\n            <RangeBar\n                ariaLabel=\"volume bar\"\n                className={audioStyle.sound_range}\n                isHideForNarrow\n                onChange={handleChangeVolumeBar}\n                progress={trackVolume}\n            />\n\n            <a\n                aria-label=\"download\"\n                className={audioStyle.download_button}\n                download={downloadFileName ?? true}\n                href={src}\n            >\n                <AudioPlayerControlButton\n                    ariaLabel=\"download\"\n                    imageId=\"button-download\"\n                    tag={audioPlayerControlTagNameMap.span}\n                />\n            </a>\n\n            <PlayListMenuButton track={track} />\n        </div>\n    );\n}\n","export function getShiftIndex(listLength: number, currentIndex: number, shift: number): number {\n    const rawIndex = (currentIndex + shift) % listLength;\n\n    if (rawIndex < 0) {\n        return rawIndex + listLength;\n    }\n\n    return rawIndex;\n}\n\nexport function getRandom(fromInclude: number, toExclude: number, excludeList?: ReadonlyArray<number>): number {\n    if (toExclude - fromInclude < 1) {\n        return fromInclude;\n    }\n\n    const randomNumber = fromInclude + Math.floor(Math.random() * (toExclude - fromInclude));\n\n    if (!excludeList) {\n        return randomNumber;\n    }\n\n    if (excludeList.includes(randomNumber)) {\n        return getRandom(fromInclude, toExclude, excludeList);\n    }\n\n    return randomNumber;\n}\n","// extracted by mini-css-extract-plugin\nvar _1 = \"f9ab9b\";\nvar _2 = \"c39598\";\nvar _3 = \"d9b0ab\";\nvar _4 = \"c82f2f\";\nvar _5 = \"da10e0\";\nexport { _1 as \"loading-spinner\", _2 as \"show-spinner-animation\", _3 as \"spinner_image\", _4 as \"spinner_wrapper\", _5 as \"spinner_wrapper__static\" }\n","import type {PositionType} from \"./spinner-type\";\n\nexport const defaultData = {\n    size: 48,\n};\n\nexport const positionValueMap: Record<PositionType, PositionType> = {\n    absolute: \"absolute\",\n    fixed: \"fixed\",\n    relative: \"relative\",\n    \"static\": \"static\",\n};\n","/* eslint-disable capitalized-comments */\n\nimport {cls} from \"../../lib/css\";\n\nimport * as spinnerStyle from \"./spinner.scss\";\nimport {defaultData, positionValueMap} from \"./spinner-const\";\nimport type {PositionType} from \"./spinner-type\";\n\nconst {size: defaultSize} = defaultData;\n\ntype PropsType = Readonly<{\n    // default - 5px\n    arcColor?: string;\n    // default - $color-border\n    circleColor?: string;\n    // default - 100%\n\n    className?: string;\n    // default - $light-gray\n    isShow?: boolean;\n    // default - 48px\n    lineWidth?: number; // default - true\n    position?: PositionType;\n    size?: number;\n    // default - static\n    wrapperColor?: string;\n    // default - 100%\n    wrapperHeight?: number | string;\n    // default - transparent\n    wrapperPadding?: number | string;\n    // default - 12px\n    wrapperWidth?: number | string; // default = ''\n}>;\n\nexport function Spinner(props: PropsType): JSX.Element | null {\n    const {\n        size: rawSize,\n        lineWidth,\n        arcColor,\n        circleColor,\n        isShow,\n        wrapperWidth,\n        wrapperHeight,\n        position: rawPosition,\n        wrapperColor,\n        wrapperPadding,\n\n        className,\n    } = props;\n\n    if (isShow === false) {\n        return null;\n    }\n\n    const position = rawPosition ?? positionValueMap.static;\n    const size = rawSize ?? defaultSize;\n\n    const spinnerImageStyle = {\n        borderColor: circleColor,\n        borderTopColor: arcColor,\n        borderWidth: lineWidth,\n        height: size,\n        width: size,\n    };\n\n    const spinnerWrapperStyle = {\n        backgroundColor: wrapperColor,\n        height: wrapperHeight,\n        minHeight: size,\n        minWidth: size,\n        padding: wrapperPadding,\n        position,\n        width: wrapperWidth,\n    };\n\n    return (\n        <div\n            className={cls(spinnerStyle.spinner_wrapper, className, {\n                [spinnerStyle.spinner_wrapper__static]: position === positionValueMap.static,\n            })}\n            style={spinnerWrapperStyle}\n        >\n            <div className={spinnerStyle.spinner_image} style={spinnerImageStyle} />\n        </div>\n    );\n}\n","// extracted by mini-css-extract-plugin\nvar _1 = \"bd925c\";\nvar _2 = \"df7adc\";\nvar _3 = \"da6e9c\";\nexport { _1 as \"audio_player_head_playing_bar\", _2 as \"time\", _3 as \"volume_bar\" }\n","import {Time} from \"../../../layout/time/c-time\";\nimport {RangeBar} from \"../../../layout/range-bar/c-range-bar\";\nimport {AudioPlayerControlButton} from \"../../../layout/audio-player-control-button/c-audio-player-control-button\";\n\nimport * as audioPlayerHeadPlayingBarStyle from \"./audio-player-head-playing-bar.scss\";\n\ntype PropsType = Readonly<{\n    isMuted: boolean;\n    onChangeProgressBar: (progress: number) => void;\n    onChangeVolumeBar: (volume: number) => void;\n    onClickMuteVolume: () => void;\n    trackCurrentTime: number;\n    trackFullTime: number;\n    trackVolume: number;\n}>;\n\nexport function AudioPlayerHeadPlayingBar(props: PropsType): JSX.Element {\n    const {\n        trackCurrentTime,\n        trackFullTime,\n        onClickMuteVolume,\n        isMuted,\n        trackVolume,\n        onChangeProgressBar,\n        onChangeVolumeBar,\n    } = props;\n    const isActualMuted = isMuted || trackVolume === 0;\n    const soundImageSrc = isActualMuted ? \"button-sound-off\" : \"button-sound-on\";\n    const isTrackInitialized = trackFullTime !== 0;\n\n    return (\n        <div className={audioPlayerHeadPlayingBarStyle.audio_player_head_playing_bar}>\n            <Time\n                className={audioPlayerHeadPlayingBarStyle.time}\n                currentTime={trackCurrentTime}\n                fullTime={trackFullTime}\n            />\n\n            <RangeBar\n                ariaLabel=\"progress bar\"\n                isDisable={!isTrackInitialized}\n                onChange={onChangeProgressBar}\n                progress={isTrackInitialized ? trackCurrentTime / trackFullTime : 0}\n            />\n\n            <AudioPlayerControlButton\n                ariaLabel=\"switch-sound\"\n                className=\"\"\n                imageId={soundImageSrc}\n                isHideForNarrow\n                onClick={onClickMuteVolume}\n            />\n\n            <RangeBar\n                ariaLabel=\"volume bar\"\n                className={audioPlayerHeadPlayingBarStyle.volume_bar}\n                isHideForNarrow\n                onChange={onChangeVolumeBar}\n                progress={trackVolume}\n            />\n        </div>\n    );\n}\n","// extracted by mini-css-extract-plugin\nvar _1 = \"b31ddf\";\nexport { _1 as \"audio_player_head_controls\" }\n","import {AudioPlayerControlButton} from \"../../../layout/audio-player-control-button/c-audio-player-control-button\";\n\nimport type {PlayerPlayingStateType, PlayerRepeatingStateType} from \"../../../../library\";\nimport {playerPlayingStateTypeMap, playerRepeatingStateTypeMap} from \"../../audio-player-const\";\n\nimport * as AudioPlayerHeadControlsStyle from \"./audio-player-head-controls.scss\";\n\nconst {one: repeatOne, all: repeatAll} = playerRepeatingStateTypeMap;\n\ntype PropsType = Readonly<{\n    isShuffleOn: boolean;\n    isTrackListOpen: boolean;\n    onClickNextTrack: () => void;\n    onClickPlay: () => void;\n    onClickPrevTrack: () => void;\n    onClickRepeat: () => void;\n\n    onClickShuffle: () => void;\n    onClickTrackList: () => void;\n    playingState: PlayerPlayingStateType;\n    repeatingState: PlayerRepeatingStateType;\n}>;\n\nexport function AudioPlayerHeadControls(props: PropsType): JSX.Element {\n    const {\n        onClickShuffle,\n        onClickRepeat,\n        onClickPrevTrack,\n        onClickPlay,\n        onClickNextTrack,\n        onClickTrackList,\n        playingState,\n        isShuffleOn,\n        repeatingState,\n        isTrackListOpen,\n    } = props;\n\n    const isPlaying = playingState === playerPlayingStateTypeMap.playing;\n\n    return (\n        <div className={AudioPlayerHeadControlsStyle.audio_player_head_controls}>\n            <AudioPlayerControlButton\n                ariaLabel=\"shuffle\"\n                imageId=\"button-shuffle\"\n                isActive={isShuffleOn}\n                onClick={onClickShuffle}\n            />\n\n            <AudioPlayerControlButton\n                ariaLabel=\"repeat\"\n                imageId={repeatingState === repeatOne ? \"button-repeat-one\" : \"button-repeat\"}\n                isActive={repeatingState === repeatOne || repeatingState === repeatAll}\n                onClick={onClickRepeat}\n            />\n\n            <AudioPlayerControlButton ariaLabel=\"prev\" imageId=\"button-prev-track\" onClick={onClickPrevTrack} />\n\n            {isPlaying ? (\n                <AudioPlayerControlButton ariaLabel=\"pause\" imageId=\"button-pause\" onClick={onClickPlay} />\n            ) : (\n                <AudioPlayerControlButton ariaLabel=\"play\" imageId=\"button-play\" onClick={onClickPlay} />\n            )}\n\n            <AudioPlayerControlButton ariaLabel=\"next\" imageId=\"button-next-track\" onClick={onClickNextTrack} />\n\n            <AudioPlayerControlButton\n                ariaLabel=\"track-list\"\n                imageId=\"button-track-list\"\n                isActive={isTrackListOpen}\n                onClick={onClickTrackList}\n            />\n        </div>\n    );\n}\n","// extracted by mini-css-extract-plugin\nvar _1 = \"fa9e1a\";\nvar _2 = \"bcf8d9\";\nexport { _1 as \"audio_player_head\", _2 as \"spinner\" }\n","import type {PlayerPlayingStateType, PlayerRepeatingStateType} from \"../../../library\";\nimport {Spinner} from \"../../layout/spinner/c-spinner\";\n\nimport {AudioPlayerHeadPlayingBar} from \"./audio-player-head-playing-bar/c-audio-player-head-playing-bar\";\nimport {AudioPlayerHeadControls} from \"./audio-player-head-controls/c-audio-player-head-controls\";\n\nimport * as audioPlayerHeadStyle from \"./audio-player-head.scss\";\n\ntype PropsType = Readonly<{\n    isLoading: boolean;\n    isMuted: boolean;\n    isShuffleOn: boolean;\n    isTrackListOpen: boolean;\n    onChangeProgressBar: (progress: number) => void;\n    onChangeVolumeBar: (volume: number) => void;\n    onClickMuteVolume: () => void;\n    onClickNextTrack: () => void;\n    onClickPlay: () => void;\n\n    onClickPrevTrack: () => void;\n    onClickRepeat: () => void;\n    onClickShuffle: () => void;\n    onClickTrackList: () => void;\n    playingState: PlayerPlayingStateType;\n    repeatingState: PlayerRepeatingStateType;\n    trackCurrentTime: number;\n    trackFullTime: number;\n    trackVolume: number;\n}>;\n\nexport function AudioPlayerHead(props: PropsType): JSX.Element {\n    const {\n        onClickShuffle,\n        onClickRepeat,\n        onClickPrevTrack,\n        onClickPlay,\n        onClickNextTrack,\n        onClickTrackList,\n        onClickMuteVolume,\n        onChangeProgressBar,\n        onChangeVolumeBar,\n\n        isMuted,\n        playingState,\n        isShuffleOn,\n        repeatingState,\n        isTrackListOpen,\n        trackCurrentTime,\n        trackVolume,\n        trackFullTime,\n        isLoading,\n    } = props;\n\n    return (\n        <div className={audioPlayerHeadStyle.audio_player_head}>\n            <Spinner\n                className={audioPlayerHeadStyle.spinner}\n                isShow={isLoading}\n                lineWidth={3}\n                position=\"absolute\"\n                size={26}\n                wrapperHeight={26}\n                wrapperPadding={0}\n                wrapperWidth={26}\n            />\n\n            <AudioPlayerHeadControls\n                isShuffleOn={isShuffleOn}\n                isTrackListOpen={isTrackListOpen}\n                onClickNextTrack={onClickNextTrack}\n                onClickPlay={onClickPlay}\n                onClickPrevTrack={onClickPrevTrack}\n                onClickRepeat={onClickRepeat}\n                onClickShuffle={onClickShuffle}\n                onClickTrackList={onClickTrackList}\n                playingState={playingState}\n                repeatingState={repeatingState}\n            />\n\n            <AudioPlayerHeadPlayingBar\n                isMuted={isMuted}\n                onChangeProgressBar={onChangeProgressBar}\n                onChangeVolumeBar={onChangeVolumeBar}\n                onClickMuteVolume={onClickMuteVolume}\n                trackCurrentTime={trackCurrentTime}\n                trackFullTime={trackFullTime}\n                trackVolume={trackVolume}\n            />\n        </div>\n    );\n}\n","// extracted by mini-css-extract-plugin\nvar _1 = \"d6f4a6\";\nexport { _1 as \"audio_player_track_list\" }\n","// extracted by mini-css-extract-plugin\nvar _1 = \"b48888\";\nvar _2 = \"b28ca0\";\nvar _3 = \"b3c7d7\";\nvar _4 = \"bbcf1f\";\nvar _5 = \"a7a82b\";\nvar _6 = \"ef10a4\";\nvar _7 = \"c4d018\";\nvar _8 = \"c0f54f\";\nvar _9 = \"bee42b\";\nvar _a = \"bef821\";\nexport { _1 as \"audio_player_track_list_item\", _2 as \"audio_player_track_list_item__active\", _3 as \"audio_tag\", _4 as \"button\", _5 as \"button_image\", _6 as \"button_image__active\", _7 as \"content\", _8 as \"play_list_menu_button\", _9 as \"track_time\", _a as \"track_title\" }\n","/* global HTMLAudioElement */\n\nimport {useRef, useState} from \"react\";\n\nimport {cls} from \"../../../lib/css\";\nimport type {PlayerPlayingStateType, TrackType} from \"../../../../library\";\nimport {playerPlayingStateTypeMap} from \"../../audio-player-const\";\nimport {SvgImage} from \"../../../layout/svg-image/c-svg-image\";\nimport {audioPlayerIconIdPrefix} from \"../../../layout/audio-player-control-sprite/c-audio-player-control-sprite\";\nimport {Spinner} from \"../../../layout/spinner/c-spinner\";\nimport {getTrackHumanTime} from \"../../../lib/time\";\n\nimport {PlayListMenuButton} from \"../../../play-list/add-track-to-play-list-button/c-add-track-to-play-list-button\";\n\nimport * as audioPlayerTrackListItemStyle from \"./audio-player-track-list-item.scss\";\nimport {getActualContent} from \"./audio-player-track-list-item-helper\";\n\ntype PropsType = Readonly<{\n    activeIndex: number;\n    isCurrentTrack: boolean;\n    isLoading: boolean;\n    onClickPlay: () => void;\n    playByIndex: (trackIndex: number) => void;\n    playingState: PlayerPlayingStateType;\n    setActiveIndex: (activeIndex: number) => void;\n    track: TrackType;\n}>;\n\nexport function AudioPlayerTrackListItem(props: PropsType): JSX.Element {\n    const {isCurrentTrack, activeIndex, track, playingState, onClickPlay, setActiveIndex, isLoading, playByIndex} =\n        props;\n\n    const {src, duration = 0, preload = \"auto\"} = track;\n    const [trackFullTime, setTrackFullTime] = useState<number>(duration);\n    const {minutes: trackFullTimeMinutes, seconds: trackFullTimeSeconds} = getTrackHumanTime(trackFullTime);\n    const refAudio = useRef<HTMLAudioElement | null>(null);\n    const actualContent = getActualContent(track);\n\n    const spinner = <Spinner isShow={isLoading} lineWidth={4} position=\"absolute\" size={30} wrapperPadding={0} />;\n\n    const className = cls(audioPlayerTrackListItemStyle.audio_player_track_list_item, {\n        [audioPlayerTrackListItemStyle.audio_player_track_list_item__active]: isCurrentTrack,\n    });\n\n    function getAudioTag(): HTMLAudioElement {\n        const audioTag = refAudio.current;\n\n        if (audioTag) {\n            return audioTag;\n        }\n\n        throw new Error(\"Audio tag is not exists\");\n    }\n\n    function handleSetActiveIndex(): void {\n        setActiveIndex(activeIndex);\n    }\n\n    function handleSetActiveIndexAndPlay(): void {\n        playByIndex(activeIndex);\n    }\n\n    function handleOnLoadedMetadata(): void {\n        const audioTag = getAudioTag();\n\n        setTrackFullTime(audioTag.duration);\n    }\n\n    function renderButton(): JSX.Element {\n        const playImageId = `#${audioPlayerIconIdPrefix}button-play`;\n        const pauseImageId = `#${audioPlayerIconIdPrefix}button-pause-playlist`;\n        const accessibleName = \"play\";\n\n        if (playingState === playerPlayingStateTypeMap.playing) {\n            if (isCurrentTrack) {\n                return (\n                    <button\n                        aria-label={accessibleName}\n                        className={audioPlayerTrackListItemStyle.button}\n                        onClick={onClickPlay}\n                        type=\"button\"\n                    >\n                        {spinner}\n\n                        <SvgImage\n                            className={audioPlayerTrackListItemStyle.button_image__active}\n                            imageId={pauseImageId}\n                        />\n                    </button>\n                );\n            }\n\n            return (\n                <button\n                    aria-label={accessibleName}\n                    className={audioPlayerTrackListItemStyle.button}\n                    onClick={handleSetActiveIndex}\n                    type=\"button\"\n                >\n                    <SvgImage className={audioPlayerTrackListItemStyle.button_image} imageId={playImageId} />\n                </button>\n            );\n        }\n\n        if (isCurrentTrack) {\n            return (\n                <button\n                    aria-label={accessibleName}\n                    className={audioPlayerTrackListItemStyle.button}\n                    onClick={onClickPlay}\n                    type=\"button\"\n                >\n                    {spinner}\n\n                    <SvgImage className={audioPlayerTrackListItemStyle.button_image} imageId={playImageId} />\n                </button>\n            );\n        }\n\n        return (\n            <button\n                aria-label={accessibleName}\n                className={audioPlayerTrackListItemStyle.button}\n                onClick={handleSetActiveIndexAndPlay}\n                type=\"button\"\n            >\n                <SvgImage className={audioPlayerTrackListItemStyle.button_image} imageId={playImageId} />\n            </button>\n        );\n    }\n\n    return (\n        <li className={className}>\n            <audio\n                className={audioPlayerTrackListItemStyle.audio_tag}\n                muted\n                onLoadedMetadata={handleOnLoadedMetadata}\n                preload={preload}\n                ref={refAudio}\n                src={src}\n            />\n\n            {renderButton()}\n\n            <div className={audioPlayerTrackListItemStyle.content}>\n                <div className={audioPlayerTrackListItemStyle.track_title}>{actualContent}</div>\n            </div>\n\n            <div className={audioPlayerTrackListItemStyle.track_time}>\n                {`${trackFullTimeMinutes}:${trackFullTimeSeconds}`}\n            </div>\n\n            <PlayListMenuButton className={audioPlayerTrackListItemStyle.play_list_menu_button} track={track} />\n        </li>\n    );\n}\n","import type {SavedTrackType, TrackType} from \"../../../../library\";\n\nexport function getActualContent(track: SavedTrackType | TrackType): JSX.Element | string {\n    const {content, mediaMetadata, src} = track;\n\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    if (content) {\n        return content;\n    }\n\n    const mediaTitle = mediaMetadata?.title;\n\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    if (mediaTitle) {\n        return mediaTitle;\n    }\n\n    const fileName = src.split(\"/\").pop();\n\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    if (!fileName) {\n        return \"\";\n    }\n\n    const indexOfExtension = fileName.lastIndexOf(\".\");\n\n    if (indexOfExtension > 0) {\n        return fileName.slice(0, indexOfExtension);\n    }\n\n    return fileName;\n}\n","import type {PlayerPlayingStateType, TrackType} from \"../../../library\";\n\nimport * as audioPlayerTrackListStyle from \"./audio-player-track-list.scss\";\nimport {AudioPlayerTrackListItem} from \"./audio-player-track-list-item/c-audio-player-track-list-item\";\n\ntype PropsType = Readonly<{\n    activeIndex: number;\n    isLoading: boolean;\n    onClickPlay: () => void;\n    playByIndex: (trackIndex: number) => void;\n    playingState: PlayerPlayingStateType;\n    setActiveIndex: (activeIndex: number) => void;\n    trackList: ReadonlyArray<TrackType>;\n}>;\n\nexport function AudioPlayerTrackList(props: PropsType): JSX.Element {\n    const {activeIndex, trackList, playingState, onClickPlay, setActiveIndex, isLoading, playByIndex} = props;\n\n    return (\n        <ul className={audioPlayerTrackListStyle.audio_player_track_list}>\n            {trackList.map((track: TrackType, index: number): JSX.Element => {\n                const isCurrentTrack = activeIndex === index;\n\n                return (\n                    <AudioPlayerTrackListItem\n                        activeIndex={index}\n                        isCurrentTrack={isCurrentTrack}\n                        isLoading={isLoading ? isCurrentTrack : false}\n                        key={track.src}\n                        onClickPlay={onClickPlay}\n                        playByIndex={playByIndex}\n                        playingState={playingState}\n                        setActiveIndex={setActiveIndex}\n                        track={track}\n                    />\n                );\n            })}\n        </ul>\n    );\n}\n","// extracted by mini-css-extract-plugin\nvar _1 = \"e2ec9c\";\nexport { _1 as \"audio_tag\" }\n","/* global document, HTMLAudioElement */\n\nimport {useEffect, useRef, useState} from \"react\";\n\nimport {setMediaMetadata} from \"../lib/media-meta-data/media-meta-data\";\nimport {getRandom, getShiftIndex} from \"../lib/number\";\nimport type {\n    DefaultAudioPlayerStateType,\n    PlayerPlayingStateType,\n    PlayerRepeatingStateType,\n    TrackType,\n} from \"../../library\";\n\nimport {AudioPlayerHead} from \"./audio-player-head/c-audio-player-head\";\nimport {AudioPlayerTrackList} from \"./audio-player-track-list/c-audio-player-track-list\";\n\nimport {\n    playerPlayingStateTypeMap,\n    playerRepeatingStateTypeList,\n    playerRepeatingStateTypeMap,\n    seekStepSecond,\n} from \"./audio-player-const\";\n\nimport {getDefaultState, getStopHandler} from \"./audio-player-helper\";\nimport * as audioPlayerStyle from \"./audio-player.scss\";\n\nexport type AudioPlayerPropsType = Readonly<{\n    className?: string;\n    defaultState?: DefaultAudioPlayerStateType;\n    onDidMount?: (audioNode: HTMLAudioElement | null) => void;\n    trackList: ReadonlyArray<TrackType>;\n}>;\n\n// eslint-disable-next-line max-statements\nexport function AudioPlayer(props: AudioPlayerPropsType): JSX.Element {\n    const {defaultState, className, onDidMount, trackList} = props;\n\n    const defaultDefinedState = getDefaultState(defaultState);\n    const duration: number = trackList.at(0)?.duration ?? 0;\n\n    const [trackCurrentTime, setTrackCurrentTime] = useState<number>(0);\n    const [trackFullTime, setTrackFullTime] = useState<number>(duration);\n    const [trackVolume, setTrackVolume] = useState<number>(1);\n    const [isMuted, setIsMuted] = useState<boolean>(defaultDefinedState.isMuted);\n    const [playingState, setPlayingState] = useState<PlayerPlayingStateType>(playerPlayingStateTypeMap.paused);\n    const [activeIndex, setActiveIndex] = useState<number>(defaultDefinedState.activeIndex);\n    const [isShuffleOn, setIsShuffleOn] = useState<boolean>(defaultDefinedState.isShuffleOn);\n    const [repeatingState, setRepeatingState] = useState<PlayerRepeatingStateType>(defaultDefinedState.repeatingState);\n    const [isTrackListOpen, setIsTrackListOpen] = useState<boolean>(defaultDefinedState.isTrackListOpen);\n    const [isLoadingMetadata, setIsLoadingMetadata] = useState<boolean>(false);\n    const [isOnEndState, setIsOnEndState] = useState<boolean>(false);\n    const refAudio = useRef<HTMLAudioElement | null>(null);\n\n    function getAudioTag(): HTMLAudioElement {\n        const audioTag = refAudio.current;\n\n        if (audioTag) {\n            return audioTag;\n        }\n\n        console.error(\"Audio tag is not exists\");\n\n        return document.createElement(\"audio\");\n    }\n\n    useEffect(() => {\n        const audioTag = getAudioTag();\n\n        if (onDidMount) {\n            onDidMount(audioTag);\n        }\n    }, [onDidMount]);\n\n    function getTrackByIndex(trackIndex: number): TrackType | null {\n        // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n        return trackList[trackIndex] || null;\n    }\n\n    function getCurrentTrack(): TrackType | null {\n        return getTrackByIndex(activeIndex);\n    }\n\n    function setActiveTrackIndex(updatedActiveIndex: number): void {\n        setActiveIndex(updatedActiveIndex);\n        setIsLoadingMetadata(true);\n        setTrackCurrentTime(0);\n        setTrackFullTime(0);\n\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        updateMediaMetadata();\n    }\n\n    function handleClickNextTrack(): void {\n        const nextIndex = getShiftIndex(trackList.length, activeIndex, 1);\n\n        setActiveTrackIndex(nextIndex);\n    }\n\n    function handleClickPrevTrack(): void {\n        const nextIndex = getShiftIndex(trackList.length, activeIndex, -1);\n\n        setActiveTrackIndex(nextIndex);\n    }\n\n    function seekForward(): void {\n        const audioTag = getAudioTag();\n\n        audioTag.currentTime += seekStepSecond;\n    }\n\n    function seekBackward(): void {\n        const audioTag = getAudioTag();\n\n        audioTag.currentTime -= seekStepSecond;\n    }\n\n    function updateMediaMetadata(): void {\n        const track = getCurrentTrack();\n\n        if (!track) {\n            return;\n        }\n\n        const {mediaMetadata} = track;\n\n        if (mediaMetadata) {\n            setMediaMetadata(mediaMetadata, {\n                nexttrack: handleClickNextTrack,\n\n                previoustrack: handleClickPrevTrack,\n\n                seekbackward: seekBackward,\n\n                seekforward: seekForward,\n                stop: getStopHandler(getAudioTag()),\n            });\n        }\n    }\n\n    function getCurrentTrackSrcAsString(): string {\n        const track = getCurrentTrack();\n\n        return track ? track.src : \"\";\n    }\n\n    function handleAudioTagOnLoadedMetadata(): void {\n        const audioTag = getAudioTag();\n\n        setIsLoadingMetadata(false);\n        setTrackFullTime(audioTag.duration);\n        audioTag.volume = trackVolume;\n    }\n\n    function handleAudioTagOnPause(): void {\n        setPlayingState(playerPlayingStateTypeMap.paused);\n    }\n\n    function handleAudioTagOnVolumeChange(): void {\n        const audioTag = getAudioTag();\n\n        setIsMuted(audioTag.muted);\n        setTrackVolume(audioTag.volume);\n    }\n\n    function handleClickPlay(): void {\n        const audioTag = getAudioTag();\n\n        if (audioTag.paused) {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            audioTag.play();\n        } else {\n            audioTag.pause();\n        }\n    }\n\n    // eslint-disable-next-line max-statements\n    function handleAudioTagOnEnded(): void {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const {one: repeatOne, all: repeatAll, none: repeatNone} = playerRepeatingStateTypeMap;\n        const trackListLength = trackList.length;\n\n        setIsOnEndState(true);\n\n        if (trackListLength <= 1) {\n            setActiveIndex(0);\n            setTrackCurrentTime(0);\n\n            return;\n        }\n\n        if (isShuffleOn) {\n            const randomActiveIndex = getRandom(0, trackListLength, [activeIndex]);\n\n            setActiveTrackIndex(randomActiveIndex);\n            return;\n        }\n\n        if (repeatingState === repeatOne) {\n            setIsOnEndState(false);\n            handleClickPlay();\n            return;\n        }\n\n        if (repeatingState === repeatAll) {\n            handleClickNextTrack();\n            return;\n        }\n\n        // The repeatingState === repeatNone, no last track\n        if (activeIndex < trackListLength - 1) {\n            handleClickNextTrack();\n            return;\n        }\n\n        // The repeatingState === repeatNone, last track\n        setIsOnEndState(false);\n        setActiveTrackIndex(0);\n    }\n\n    function handleAudioTagOnPlay(): void {\n        setPlayingState(playerPlayingStateTypeMap.playing);\n        updateMediaMetadata();\n    }\n\n    function handleAudioTagCanOnPlay(): void {\n        if (isOnEndState) {\n            setIsOnEndState(false);\n            handleClickPlay();\n        }\n    }\n\n    function handleAudioTagOnTimeUpdate(): void {\n        const audioTag = getAudioTag();\n\n        setTrackCurrentTime(audioTag.currentTime);\n    }\n\n    function handleClickMute(): void {\n        const audioTag = getAudioTag();\n\n        const isNewMuted = !audioTag.muted;\n\n        audioTag.muted = isNewMuted;\n\n        setIsMuted(isNewMuted);\n    }\n\n    function handleClickShuffle(): void {\n        setIsShuffleOn(!isShuffleOn);\n    }\n\n    function handleClickRepeat(): void {\n        const currentIndex = playerRepeatingStateTypeList.indexOf(repeatingState);\n        const nextIndex = (currentIndex + 1) % playerRepeatingStateTypeList.length;\n\n        setRepeatingState(playerRepeatingStateTypeList[nextIndex]);\n    }\n\n    function handleClickShowHideTrackList(): void {\n        setIsTrackListOpen(!isTrackListOpen);\n    }\n\n    function handleChangeProgressBar(trackCurrentProgress: number): void {\n        const audioTag = getAudioTag();\n\n        audioTag.currentTime = trackCurrentProgress * trackFullTime;\n    }\n\n    function handleChangeVolumeBar(VolumeBarValue: number): void {\n        const audioTag = getAudioTag();\n\n        audioTag.volume = VolumeBarValue;\n    }\n\n    function playByIndex(trackIndex: number): void {\n        setActiveIndex(trackIndex);\n        setIsLoadingMetadata(true);\n\n        const audioTag = getAudioTag();\n\n        function handleOnCanPlay(): void {\n            setIsLoadingMetadata(false);\n\n            audioTag.removeEventListener(\"canplay\", handleOnCanPlay, false);\n\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            audioTag.play();\n        }\n\n        audioTag.addEventListener(\"canplay\", handleOnCanPlay, false);\n    }\n\n    return (\n        <div className={className ?? \"\"}>\n            <audio\n                autoPlay={playingState === playerPlayingStateTypeMap.playing}\n                className={audioPlayerStyle.audio_tag}\n                key=\"audio-tag\"\n                muted={isMuted}\n                onCanPlay={handleAudioTagCanOnPlay}\n                onEnded={handleAudioTagOnEnded}\n                onLoadedMetadata={handleAudioTagOnLoadedMetadata}\n                onPause={handleAudioTagOnPause}\n                onPlay={handleAudioTagOnPlay}\n                onTimeUpdate={handleAudioTagOnTimeUpdate}\n                onVolumeChange={handleAudioTagOnVolumeChange}\n                preload=\"metadata\"\n                ref={refAudio}\n                src={getCurrentTrackSrcAsString()}\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment, @typescript-eslint/prefer-ts-expect-error\n                // @ts-ignore\n                volume={trackVolume}\n            >\n                <track kind=\"captions\" src={getCurrentTrackSrcAsString()} />\n            </audio>\n\n            <AudioPlayerHead\n                isLoading={isLoadingMetadata}\n                isMuted={isMuted}\n                isShuffleOn={isShuffleOn}\n                isTrackListOpen={isTrackListOpen}\n                onChangeProgressBar={handleChangeProgressBar}\n                onChangeVolumeBar={handleChangeVolumeBar}\n                onClickMuteVolume={handleClickMute}\n                onClickNextTrack={handleClickNextTrack}\n                onClickPlay={handleClickPlay}\n                onClickPrevTrack={handleClickPrevTrack}\n                onClickRepeat={handleClickRepeat}\n                onClickShuffle={handleClickShuffle}\n                onClickTrackList={handleClickShowHideTrackList}\n                playingState={playingState}\n                repeatingState={repeatingState}\n                trackCurrentTime={trackCurrentTime}\n                trackFullTime={trackFullTime}\n                trackVolume={trackVolume}\n            />\n\n            {isTrackListOpen ? (\n                <AudioPlayerTrackList\n                    activeIndex={activeIndex}\n                    isLoading={isLoadingMetadata}\n                    onClickPlay={handleClickPlay}\n                    playByIndex={playByIndex}\n                    playingState={playingState}\n                    setActiveIndex={setActiveTrackIndex}\n                    trackList={trackList}\n                />\n            ) : null}\n        </div>\n    );\n}\n","/* global localStorage */\n\nimport type {PlayListType} from \"./play-list-context-type\";\nimport {defaultPlayListName} from \"./play-list-context-const\";\n\nconst localStorageKeyName = \"react-audio-player-play-list-storage-key-v.1.0.0\";\n\ntype SavedDataType = ReadonlyArray<PlayListType>;\n\nfunction getDefaultPlayListContextData(): SavedDataType {\n    return [\n        {\n            name: defaultPlayListName,\n            // IsDefault: true,\n            trackList: [],\n        },\n    ];\n}\n\nexport function savePlayListContextData(data: SavedDataType): void {\n    if (typeof localStorage === \"undefined\") {\n        return;\n    }\n\n    localStorage.setItem(localStorageKeyName, JSON.stringify(data));\n}\n\nexport function getSavedPlayListContextData(): SavedDataType {\n    if (typeof localStorage === \"undefined\") {\n        return getDefaultPlayListContextData();\n    }\n\n    const rawData = localStorage.getItem(localStorageKeyName);\n\n    if (typeof rawData === \"string\" && rawData.trim()) {\n        // TODO: add type check here\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return JSON.parse(rawData);\n    }\n\n    return getDefaultPlayListContextData();\n}\n","import {useCallback, useEffect, useMemo, useState, type ReactNode} from \"react\";\n\nimport type {SavedTrackType} from \"../../../library\";\nimport {getRandomStringBySize} from \"../../lib/string\";\n\nimport type {PlayListContextType, PlayListType} from \"./play-list-context-type\";\nimport {getSavedPlayListContextData, savePlayListContextData} from \"./play-list-context-storage\";\nimport {defaultPlayListName} from \"./play-list-context-const\";\nimport {PlayListContext} from \"./play-list-context\";\n\nexport type PlayListProviderPropsType = Readonly<{children: ReactNode}>;\n\nexport function PlayListProvider(props: PlayListProviderPropsType): JSX.Element {\n    const {children} = props;\n    const [list, setList] = useState<ReadonlyArray<PlayListType>>(getSavedPlayListContextData());\n\n    const getTrackById = useCallback(\n        (trackId: string): SavedTrackType | null => {\n            const listLength = list.length;\n\n            for (let playListIndex = 0; playListIndex < listLength; playListIndex += 1) {\n                const {trackList} = list[playListIndex];\n                const trackListLength = trackList.length;\n\n                for (let trackIndex = 0; trackIndex < trackListLength; trackIndex += 1) {\n                    const track = trackList[trackIndex];\n\n                    if (track.id === trackId) {\n                        return track;\n                    }\n                }\n            }\n\n            return null;\n        },\n        [list]\n    );\n\n    const createPlayList = useCallback((): PlayListType => {\n        const updatedPlayList: PlayListType = {\n            name: `${defaultPlayListName} ${getRandomStringBySize(4)}`,\n            trackList: [],\n            // IsDefault: false,\n        };\n\n        const updatedList = [...list, updatedPlayList];\n\n        setList(updatedList);\n\n        return updatedPlayList;\n    }, [list, setList]);\n\n    const getAllPlayLists = useCallback((): Array<PlayListType> => {\n        return [...list];\n    }, [list]);\n\n    const updatePlayList = useCallback(\n        (oldPlayList: PlayListType, updatedListPlayData: PlayListType): Error | PlayListType => {\n            const updatedList = [...list];\n\n            const playListIndex = updatedList.indexOf(oldPlayList);\n\n            if (playListIndex < 0) {\n                return new Error(\"Old Play List is not exists.\");\n            }\n\n            updatedList[playListIndex] = updatedListPlayData;\n\n            setList(updatedList);\n\n            return updatedListPlayData;\n        },\n        [list, setList]\n    );\n\n    const deletePlayList = useCallback(\n        (playList: PlayListType): Error | null => {\n            const updatedList = [...list];\n\n            const playListIndex = updatedList.indexOf(playList);\n\n            if (playListIndex < 0) {\n                return new Error(\"Play List is not exists.\");\n            }\n\n            updatedList.splice(playListIndex, 1);\n\n            setList(updatedList);\n\n            return null;\n        },\n        [list, setList]\n    );\n\n    const removeTrackById = useCallback(\n        (trackId: string): Error | null => {\n            const listLength = list.length;\n\n            for (let playListIndex = 0; playListIndex < listLength; playListIndex += 1) {\n                const playList = list[playListIndex];\n                const {trackList} = playList;\n                const trackListLength = trackList.length;\n\n                for (let trackIndex = 0; trackIndex < trackListLength; trackIndex += 1) {\n                    const track = trackList[trackIndex];\n\n                    if (track.id === trackId) {\n                        const updatedTrackList = [...trackList];\n\n                        updatedTrackList.splice(trackIndex, 1);\n\n                        updatePlayList(playList, {\n                            ...playList,\n                            trackList: updatedTrackList,\n                        });\n\n                        return null;\n                    }\n                }\n            }\n\n            return new Error(\"Track is not exists.\");\n        },\n        [list, updatePlayList]\n    );\n\n    const providedData: PlayListContextType = useMemo<PlayListContextType>((): PlayListContextType => {\n        return {\n            createPlayList,\n            deletePlayList,\n            getAllPlayLists,\n            getTrackById,\n            isInitialized: true,\n            removeTrackById,\n            updatePlayList,\n        };\n    }, [createPlayList, getAllPlayLists, updatePlayList, deletePlayList, removeTrackById, getTrackById]);\n\n    useEffect(() => {\n        savePlayListContextData(list);\n    }, [list]);\n\n    return <PlayListContext.Provider value={providedData}>{children}</PlayListContext.Provider>;\n}\n","// extracted by mini-css-extract-plugin\nvar _1 = \"dd564f\";\nvar _2 = \"b59941\";\nvar _3 = \"a7ad0a\";\nexport { _1 as \"add_play_list_button\", _2 as \"add_play_list_wrapper\", _3 as \"play_list_panel\" }\n","// extracted by mini-css-extract-plugin\nvar _1 = \"fe1637\";\nvar _2 = \"f500e1\";\nvar _3 = \"ecef14\";\nvar _4 = \"aec634\";\nvar _5 = \"e85b98\";\nvar _6 = \"a470ec\";\nexport { _1 as \"header_container\", _2 as \"header_input\", _3 as \"no_track_here\", _4 as \"play_list_container\", _5 as \"remove_play_list_button\", _6 as \"remove_play_list_button_active\" }\n","/* global HTMLInputElement */\n\nimport {useCallback, useContext, useRef} from \"react\";\n\nimport type {PlayListType} from \"../../../../provider/play-list/play-list-context-type\";\nimport {PlayListContext} from \"../../../../provider/play-list/play-list-context\";\nimport {noNamePlayListName} from \"../../../../provider/play-list/play-list-context-const\";\nimport {AudioPlayer} from \"../../../../audio-player/c-audio-player\";\nimport {savedTrackToTrack} from \"../../../../provider/play-list/play-list-context-helper\";\nimport {AudioPlayerControlButton} from \"../../../../layout/audio-player-control-button/c-audio-player-control-button\";\n\nimport * as playListContainerStyle from \"./play-list-container.scss\";\n\ntype PropsType = Readonly<{\n    playList: PlayListType;\n}>;\n\nexport function PlayListContainer(props: PropsType): JSX.Element {\n    const {playList} = props;\n    const {trackList, name: playListName} = playList;\n    const inputPlayListNameRef = useRef<HTMLInputElement | null>(null);\n\n    const playListContextData = useContext(PlayListContext);\n    const {updatePlayList, deletePlayList, getAllPlayLists} = playListContextData;\n    const allPlayLists = getAllPlayLists();\n    const hasTrackInList = trackList.length > 0;\n\n    function getInputPlayListName(): HTMLInputElement {\n        return (\n            inputPlayListNameRef.current ??\n            ((): HTMLInputElement => {\n                throw new Error(\"Can not get input of play list name\");\n            })()\n        );\n    }\n\n    const handleOnBlurPlayListName = useCallback(() => {\n        updatePlayList(playList, {\n            name: getInputPlayListName().value.trim(),\n            trackList,\n        });\n    }, [updatePlayList, playList, trackList]);\n\n    const handleRemovePlayList = useCallback(() => {\n        deletePlayList(playList);\n    }, [deletePlayList, playList]);\n\n    const useRemovePlayListButton = allPlayLists.length > 1 && trackList.length === 0;\n    const removePlayListButtonClassName = useRemovePlayListButton\n        ? playListContainerStyle.remove_play_list_button_active\n        : playListContainerStyle.remove_play_list_button;\n\n    return (\n        <div className={playListContainerStyle.play_list_container}>\n            <div className={playListContainerStyle.header_container}>\n                <input\n                    className={playListContainerStyle.header_input}\n                    defaultValue={playListName}\n                    onBlur={handleOnBlurPlayListName}\n                    placeholder={noNamePlayListName}\n                    ref={inputPlayListNameRef}\n                    type=\"text\"\n                />\n\n                <AudioPlayerControlButton\n                    ariaLabel=\"delete\"\n                    className={removePlayListButtonClassName}\n                    imageId=\"trash-bin\"\n                    onClick={handleRemovePlayList}\n                />\n            </div>\n\n            {hasTrackInList ? (\n                <AudioPlayer trackList={trackList.map(savedTrackToTrack)} />\n            ) : (\n                <p className={playListContainerStyle.no_track_here}>∅</p>\n            )}\n        </div>\n    );\n}\n","import type {PlayListType} from \"../../provider/play-list/play-list-context-type\";\n\nimport {PlayListContainer} from \"./list-of-play-list/play-list-container/c-play-list-container\";\n\nexport function renderPlayListContainer(playList: PlayListType, index: number): JSX.Element {\n    return <PlayListContainer key={`${playList.name}-${String(index)}`} playList={playList} />;\n}\n","import {useContext} from \"react\";\n\nimport {PlayListContext} from \"../../provider/play-list/play-list-context\";\nimport {AudioPlayerControlButton} from \"../../layout/audio-player-control-button/c-audio-player-control-button\";\n\nimport * as playListPanelStyle from \"./play-list-panel.scss\";\nimport {renderPlayListContainer} from \"./play-list-panel-helper\";\n\nexport function PlayListPanel(): JSX.Element {\n    const playListContextData = useContext(PlayListContext);\n    const {createPlayList, getAllPlayLists} = playListContextData;\n    const listOfPlayList = getAllPlayLists();\n\n    return (\n        <div className={playListPanelStyle.play_list_panel}>\n            {listOfPlayList.map(renderPlayListContainer)}\n\n            <div className={playListPanelStyle.add_play_list_wrapper}>\n                <AudioPlayerControlButton\n                    ariaLabel=\"add play list\"\n                    className={playListPanelStyle.add_play_list_button}\n                    imageId=\"play-list-plus\"\n                    onClick={createPlayList}\n                />\n            </div>\n        </div>\n    );\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","cls","argumentList","classNameList","classNameData","push","join","seekStepSecond","playerPlayingStateTypeMap","paused","playing","stopped","playerRepeatingStateTypeMap","all","none","one","playerRepeatingStateTypeList","defaultAudioPlayerState","activeIndex","isMuted","isShuffleOn","isTrackListOpen","repeatingState","SvgImage","props","className","imageId","_jsx","children","xlinkHref","_1","audioPlayerIconIdPrefix","mainFillColor","defaultViewBox","xmlns","AudioPlayerControlSprite","_jsxs","audioPlayerControlSpriteStyle","id","viewBox","d","fill","audioPlayerControlTagNameMap","div","span","cssButton","cssActive","cssWidthBorder","cssImage","hideForNarrow","AudioPlayerControlButton","onClick","isActive","ariaLabel","tag","hasBorder","isHideForNarrow","fullClassName","image","type","getTrackHumanTime","timeInSeconds","minutes","String","Math","floor","seconds","padStart","Time","currentTime","fullTime","timeStyle","timeProgress","currentTimeInSeconds","fullTimeInSeconds","currentTimeMinutes","currentTimeSeconds","fullTimeMinutes","fullTimeSeconds","getProgressHumanTime","_7","_8","_9","inputData","defaultValue","max","min","step","RangeBar","isMouseDown","setIsMouseDown","useState","inputRef","useRef","isDisable","progress","onChange","rangeBarStyle","onPointerDown","onPointerUp","style","transform","left","current","Number","parseFloat","getCurrentValue","ref","mediaMetadataControlNameList","setMediaMetadata","mediaMetadata","mediaMetadataControlSetting","navigator","MediaMetadata","mediaSession","metadata","controlName","setActionHandler","clearMediaMetadata","_a","getStopHandler","audioTag","addEventListener","handleCanPlay","removeEventListener","play","then","pause","isTracksEquals","trackA","trackB","src","savedTrackToTrack","savedTrack","content","track","defaultPlayListContextData","defaultPlayList","name","trackList","createPlayList","deletePlayList","playList","Error","getAllPlayLists","getTrackById","trackId","isInitialized","removeTrackById","updatePlayList","oldPlayList","updatedListPlayData","getDefaultPlayListContextData","PlayListContext","createContext","getRandomString","round","random","toString","getRandomOne","defaultPlayListName","noNamePlayListName","PlayListMenuButton","addTrackToPlayListButtonStyle","playListContextData","useContext","selectKey","setSelectKey","isPlayListContextInitialized","listOfPlayList","defaultSelectValue","handleAddTrack","useCallback","evt","selectNode","currentTarget","listIndex","parseInt","at","preload","duration","existsSavedTrack","find","trackToSave","updatedTrackList","disabled","map","index","isTrackExistsInPlayList","trim","text","Audio","downloadFileName","onDidMount","useRepeatButton","refAudio","trackCurrentTime","setTrackCurrentTime","trackFullTime","setTrackFullTime","trackVolume","setTrackVolume","setIsMuted","playingState","setPlayingState","isRepeatOn","setIsRepeatOn","soundImageId","getAudioTag","handleClickPlay","seekForward","seekBackward","useEffect","audioStyle","onEnded","onLoadedMetadata","volume","onPause","onPlay","seek","seekbackward","seekforward","stop","title","onTimeUpdate","onVolumeChange","muted","kind","audioTagTrackCurrentTime","audioTagIsMuted","volumeBarValue","download","href","getShiftIndex","listLength","currentIndex","shift","rawIndex","getRandom","fromInclude","toExclude","excludeList","randomNumber","includes","positionValueMap","absolute","fixed","relative","size","defaultSize","Spinner","rawSize","lineWidth","arcColor","circleColor","isShow","wrapperWidth","wrapperHeight","position","rawPosition","wrapperColor","wrapperPadding","static","spinnerImageStyle","borderColor","borderTopColor","borderWidth","height","width","spinnerWrapperStyle","backgroundColor","minHeight","minWidth","padding","spinnerStyle","AudioPlayerHeadPlayingBar","onClickMuteVolume","onChangeProgressBar","onChangeVolumeBar","soundImageSrc","isTrackInitialized","audioPlayerHeadPlayingBarStyle","repeatOne","repeatAll","AudioPlayerHeadControls","onClickShuffle","onClickRepeat","onClickPrevTrack","onClickPlay","onClickNextTrack","onClickTrackList","isPlaying","AudioPlayerHeadControlsStyle","AudioPlayerHead","isLoading","audioPlayerHeadStyle","AudioPlayerTrackListItem","isCurrentTrack","setActiveIndex","playByIndex","trackFullTimeMinutes","trackFullTimeSeconds","actualContent","mediaTitle","fileName","split","pop","indexOfExtension","lastIndexOf","slice","getActualContent","spinner","audioPlayerTrackListItemStyle","handleSetActiveIndex","handleSetActiveIndexAndPlay","playImageId","pauseImageId","accessibleName","renderButton","AudioPlayerTrackList","audioPlayerTrackListStyle","AudioPlayer","defaultState","defaultDefinedState","getDefaultState","_b","setIsShuffleOn","setRepeatingState","setIsTrackListOpen","isLoadingMetadata","setIsLoadingMetadata","isOnEndState","setIsOnEndState","console","error","document","createElement","getCurrentTrack","setActiveTrackIndex","updatedActiveIndex","updateMediaMetadata","handleClickNextTrack","length","handleClickPrevTrack","nexttrack","previoustrack","getCurrentTrackSrcAsString","autoPlay","audioPlayerStyle","onCanPlay","repeatNone","trackListLength","trackCurrentProgress","VolumeBarValue","isNewMuted","nextIndex","indexOf","trackIndex","handleOnCanPlay","localStorageKeyName","PlayListProvider","list","setList","localStorage","rawData","getItem","JSON","parse","getSavedPlayListContextData","playListIndex","updatedPlayList","Array","from","sort","updatedList","splice","providedData","useMemo","data","setItem","stringify","Provider","PlayListContainer","playListName","inputPlayListNameRef","allPlayLists","hasTrackInList","getInputPlayListName","handleOnBlurPlayListName","handleRemovePlayList","removePlayListButtonClassName","playListContainerStyle","onBlur","placeholder","renderPlayListContainer","PlayListPanel","playListPanelStyle"],"sourceRoot":""}